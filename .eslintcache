[{"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/CardList.js":"1","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/Utils/CopyClip.js":"2","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ClipBoardModal.js":"3","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/index.js":"4","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/GraphqlClient.js":"5","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/AppHeader.js":"6","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/reportWebVitals.js":"7","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ToggleButton.js":"8","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/App.js":"9","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/Home.js":"10","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/Login.js":"11","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/AppRouter.js":"12","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/GraphqlQueries.js":"13","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ClipCard.js":"14","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ProfileModal.js":"15","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/SettingsModal.js":"16","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/LoginRedirect.js":"17","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/Loading.js":"18"},{"size":951,"mtime":1607767227930,"results":"19","hashOfConfig":"20"},{"size":1198,"mtime":1607427374901,"results":"21","hashOfConfig":"20"},{"size":3140,"mtime":1607513413420,"results":"22","hashOfConfig":"20"},{"size":462,"mtime":1607698324580,"results":"23","hashOfConfig":"20"},{"size":573,"mtime":1607698340500,"results":"24","hashOfConfig":"20"},{"size":4241,"mtime":1607767320020,"results":"25","hashOfConfig":"20"},{"size":362,"mtime":1606630090938,"results":"26","hashOfConfig":"20"},{"size":489,"mtime":1607405981880,"results":"27","hashOfConfig":"20"},{"size":876,"mtime":1607614362360,"results":"28","hashOfConfig":"20"},{"size":1117,"mtime":1607767136860,"results":"29","hashOfConfig":"20"},{"size":3745,"mtime":1607752838460,"results":"30","hashOfConfig":"20"},{"size":880,"mtime":1607698351410,"results":"31","hashOfConfig":"20"},{"size":751,"mtime":1607409236080,"results":"32","hashOfConfig":"20"},{"size":6927,"mtime":1607765150430,"results":"33","hashOfConfig":"20"},{"size":2596,"mtime":1607754275490,"results":"34","hashOfConfig":"20"},{"size":3274,"mtime":1607699325600,"results":"35","hashOfConfig":"20"},{"size":1883,"mtime":1607753484270,"results":"36","hashOfConfig":"20"},{"size":3324,"mtime":1607610719600,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1fixph7",{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"43"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"43"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"43"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"43"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"43"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"43"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"43"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"43"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"43"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"43"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/CardList.js",["87"],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/Utils/CopyClip.js",["88","89","90"],"const fallbackCopyTextToClipboard = (text, success, error) => {\n  let done;\n  var textArea = document.createElement(\"textarea\");\n  textArea.value = text;\n\n  // Avoid scrolling to bottom\n  textArea.style.top = \"0\";\n  textArea.style.left = \"0\";\n  textArea.style.position = \"fixed\";\n\n  document.body.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    var successful = document.execCommand(\"copy\");\n    var msg = successful ? \"successful\" : \"unsuccessful\";\n    // console.log(\"Fallback: Copying text command was \" + msg);\n    if (successful) {\n      success();\n    } else {\n      error();\n    }\n  } catch (err) {\n    error();\n    // console.error(\"Fallback: Oops, unable to copy\", err);\n  }\n\n  document.body.removeChild(textArea);\n};\nexport const copyTextToClipboard = (text, success, error) => {\n  let done;\n  if (!navigator.clipboard) {\n    fallbackCopyTextToClipboard(text, success, error);\n    return;\n  }\n  navigator.clipboard.writeText(text).then(\n    function () {\n      success();\n      // console.log(\"Async: Copying to clipboard was successful!\");\n    },\n    function (err) {\n      error();\n      // console.error(\"Async: Could not copy text: \", err);\n    }\n  );\n};\n",["91","92"],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ClipBoardModal.js",["93","94"],"import { Modal, Button, Tooltip, Input } from \"antd\";\nimport { PlusCircleOutlined } from \"@ant-design/icons\";\nimport React, { useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\n\nimport { AES } from \"crypto-js\";\n\nimport { CREATE_CLIP, GET_MY_CLIPS } from \"../GraphqlQueries\";\n\nexport default function ClipBoardModal(props) {\n  \n  const { TextArea } = Input;\n  const [createClip, { data }] = useMutation(CREATE_CLIP, {\n    update(cache, { data }) {\n      const newClipFromResponse = data?.createClip.clip;\n      const existingClips = cache.readQuery({\n        query: GET_MY_CLIPS,\n      });\n      if (existingClips && newClipFromResponse) {\n        cache.writeQuery({\n          query: GET_MY_CLIPS,\n          data: {\n            clips: [...existingClips?.clips, newClipFromResponse],\n          },\n        });\n      }\n      // refetch();\n      setokButtonLoading(false);\n      setmodalVisible(false);\n      settextAreaValue(\"\");\n    },\n  });\n\n  const [textAreaValue, settextAreaValue] = useState(\"\");\n  const [modalVisible, setmodalVisible] = useState(false);\n  const [okButtonLoading, setokButtonLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const handleAddFromClipboard = () => {\n    navigator.clipboard\n      .readText()\n      .then((text) => {\n        settextAreaValue(text);\n      })\n      .catch((err) => {\n        console.log(err);\n        setError(true);\n      });\n  };\n\n  const showModal = () => {\n    setmodalVisible(true);\n  };\n  const encryptText = (text) => {\n    return AES.encrypt(text, \"SECRET_TOKEN\").toString();\n    // return text;\n  };\n\n  const handleOk = () => {\n    setokButtonLoading(true);\n    let oldList = data;\n    createClip({ variables: { data: encryptText(textAreaValue) } });\n  };\n\n  const handleCancel = () => {\n    setmodalVisible(false);\n  };\n  const onTextAreaValueChange = ({ target: { value } }) => {\n    settextAreaValue(value);\n  };\n\n  return (\n    <>\n      <Tooltip title=\"Add Clip\">\n        <Button\n          shape=\"circle\"\n          type=\"primary\"\n          onClick={showModal}\n          size=\"large\"\n          icon={<PlusCircleOutlined />}\n        />\n      </Tooltip>\n      <Modal\n        visible={modalVisible}\n        title=\"Add Clip\"\n        onOk={handleOk}\n        onCancel={handleCancel}\n        footer={[\n          <Button key=\"back\" onClick={handleCancel}>\n            Cancel\n          </Button>,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            loading={okButtonLoading}\n            onClick={handleOk}\n          >\n            Add this Clip\n          </Button>,\n        ]}\n      >\n        {error ? (\n          <p>Some Error Occuerd</p>\n        ) : (\n          <>\n            <Button\n              key=\"back\"\n              type=\"dashed\"\n              block\n              onClick={handleAddFromClipboard}\n            >\n              Add From ClipBoard\n            </Button>\n            <TextArea\n              value={textAreaValue}\n              onChange={onTextAreaValueChange}\n              autoSize={{ minRows: 3, maxRows: 15 }}\n            />\n          </>\n        )}\n      </Modal>\n    </>\n  );\n}\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/index.js",["95","96"],"import React, { useState, useEffect } from \"react\";\nimport { render } from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { ApolloProvider } from \"@apollo/client\";\nimport { client } from \"./GraphqlClient\";\n\nconst Root = () => {\n  return (\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  );\n};\n\nrender(<Root />, document.getElementById(\"root\"));\n\nreportWebVitals();\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/GraphqlClient.js",[],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/AppHeader.js",["97","98","99","100","101","102","103","104","105","106"],"import React from \"react\";\nimport { Menu, Switch, Button, Input } from \"antd\";\nimport {\n  UserOutlined,\n  PlusCircleTwoTone,\n  SearchOutlined,\n  SettingOutlined,\n  LockOutlined,\n  CloseOutlined,\n} from \"@ant-design/icons\";\nimport { Row, Col } from \"antd\";\n\nimport ClipBoardModal from \"./ClipBoardModal\";\nimport SettingsModal from \"./SettingsModal\";\nimport ProfileModal from \"./ProfileModal\";\n\nimport ToggleButton from \"./ToggleButton\";\nconst { SubMenu } = Menu;\nconst { Search } = Input;\nconst onSearch = (value) => console.log(value);\n\nexport default class AppHeader extends React.Component {\n  state = {\n    current: \"mail\",\n    themeMode: \"light\",\n    searchOpen: false,\n  };\n\n  changeTheme = (e) => {\n    this.setState({ themeMode: e.value ? \"dark\" : \"light\" });\n  };\n  handleSearchOn = (e) => {\n    this.setState({ searchOpen: !this.state.searchOpen });\n  };\n  render() {\n    const { current } = this.state;\n    // if (this.state.searchOpen) return <AppHeaderSearchOn />;\n    if (this.state.searchOpen) {\n      return (\n        <AppHeaderSearchOn\n          searchString={this.props.searchString}\n          setsearchString={this.props.setsearchString}\n          handleSearchOn={this.handleSearchOn.bind(this)}\n        />\n      );\n    }\n    if (this.props.loading) {\n      return <AppHeaderLoading />;\n    }\n    if (!localStorage.getItem(\"jwt\")) {\n      return <AppHeaderNotLoggedIn />;\n    }\n\n    return (\n      <Row justify=\"center\" style={{ marginTop: 2, background: \"#FFF\" }}>\n        <Col\n          xs={{ span: 5 }}\n          sm={{ span: 4 }}\n          md={{ span: 2 }}\n          lg={{ span: 1 }}\n          xl={{ span: 1 }}\n        >\n          <ProfileModal />\n        </Col>\n        <Col\n          xs={{ span: 5 }}\n          sm={{ span: 4 }}\n          md={{ span: 2 }}\n          lg={{ span: 1 }}\n          xl={{ span: 1 }}\n        >\n          <SettingsModal />\n        </Col>\n        <Col\n          xs={{ span: 5 }}\n          sm={{ span: 4 }}\n          md={{ span: 2 }}\n          lg={{ span: 1 }}\n          xl={{ span: 1 }}\n        >\n          <Button\n            type=\"primary\"\n            shape=\"circle\"\n            icon={<SearchOutlined />}\n            onClick={this.handleSearchOn}\n            size=\"large\"\n          />\n        </Col>\n        <Col\n          xs={{ span: 5 }}\n          sm={{ span: 4 }}\n          md={{ span: 2 }}\n          lg={{ span: 1 }}\n          xl={{ span: 1 }}\n        >\n          <ClipBoardModal />\n        </Col>\n      </Row>\n    );\n  }\n}\n\nfunction AppHeaderNotLoggedIn(props) {\n  return (\n    <Row justify=\"center\" style={{ marginTop: 2, background: \"#FFF\" }}>\n      <Col\n        xs={{ span: 24 }}\n        sm={{ span: 20 }}\n        md={{ span: 8 }}\n        lg={{ span: 4 }}\n        xl={{ span: 4 }}\n      >\n        <Button type=\"primary\" shape=\"round\" block size=\"large\">\n          Enclipy\n        </Button>\n      </Col>\n    </Row>\n  );\n}\nfunction AppHeaderSearchOn(props) {\n  return (\n    <Row justify=\"center\" style={{ marginTop: 2, background: \"#FFF\" }}>\n      <Col\n        xs={{ span: 15 }}\n        sm={{ span: 12 }}\n        md={{ span: 6 }}\n        lg={{ span: 3 }}\n        xl={{ span: 3 }}\n      >\n        <Input\n          placeholder=\"input search text\"\n          value={props.searchString}\n          onChange={({ target: { value } }) => {\n            props.setsearchString(value);\n          }}\n          shape=\"round\"\n          size=\"large\"\n        />\n      </Col>\n      <Col\n        xs={{ span: 5 }}\n        sm={{ span: 4 }}\n        md={{ span: 2 }}\n        lg={{ span: 1 }}\n        xl={{ span: 1 }}\n      >\n        <Button\n          type=\"primary\"\n          shape=\"circle\"\n          icon={<CloseOutlined />}\n          size=\"large\"\n          onClick={() => {\n            props.handleSearchOn();\n            props.setsearchString(\"\");\n          }}\n        />\n      </Col>\n    </Row>\n  );\n}\n\nfunction AppHeaderLoading(props) {\n  return (\n    <Row justify=\"center\" style={{ marginTop: 2, background: \"#FFF\" }}>\n      <Col\n        xs={{ span: 24 }}\n        sm={{ span: 20 }}\n        md={{ span: 8 }}\n        lg={{ span: 4 }}\n        xl={{ span: 4 }}\n      >\n        <Button type=\"primary\" shape=\"round\" block size=\"large\" loading>\n          Enclipy\n        </Button>\n      </Col>\n    </Row>\n  );\n}\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/reportWebVitals.js",[],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ToggleButton.js",["107"],"import React from \"react\";\nimport { Radio, Button } from \"antd\";\n\nexport default class ToggleButton extends React.Component {\n  state = {\n    darkMode: false,\n  };\n\n  changeTheme = () => {\n    this.setState({\n      darkMode: !this.state.darkMode,\n    });\n  };\n\n  render() {\n    return (\n      <Button\n        type=\"primary\"\n        onClick={this.changeTheme}\n        style={{ marginTop: 16 }}\n      >\n        {this.state.darkMode ? \"Light Mode\" : \"Dark Mode\"}\n      </Button>\n    );\n  }\n}\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/App.js",["108","109","110","111","112","113","114","115","116"],"import React, { useState } from \"react\";\nimport { Layout } from \"antd\";\nimport { useQuery } from \"@apollo/client\";\n\nimport AppRouter from \"./AppRouter\";\n\nimport { GET_MY_CLIPS } from \"./GraphqlQueries\";\nimport \"./App.css\";\n\nimport { ApolloClient, createHttpLink, InMemoryCache } from \"@apollo/client\";\n\nconst App = () => {\n  const { Header, Content, Footer } = Layout;\n\n  return (\n    <div className=\"App\">\n      <Layout className=\"layout\" style={{ background: \"#FFF\" }}>\n        <AppRouter />\n\n        {/* <Footer */}\n        {/*   style={{ */}\n        {/*     position: \"sticky\", */}\n        {/*     bottom: \"0\", */}\n        {/*     height: \"50px\", */}\n        {/*     padding: \"0px\", */}\n        {/*     background: \"#FFFFFF00\", */}\n        {/*   }} */}\n        {/* > */}\n        {/*    */}\n        {/* </Footer> */}\n      </Layout>\n    </div>\n  );\n};\n\nexport default App;\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/Home.js",["117","118"],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/Login.js",["119","120"],"import React from \"react\";\nimport { Row, Col, Card, Typography, Carousel, Image } from \"antd\";\nimport {\n  GoogleOutlined,\n  UserAddOutlined,\n  UserSwitchOutlined,\n} from \"@ant-design/icons\";\nimport { Button } from \"antd\";\nimport AppHeader from \"../components/AppHeader\";\nimport { Layout } from \"antd\";\nconst contentStyle = {\n  color: \"#17B1F9\",\n  textAlign: \"center\",\n};\nconst introStyle = {\n  height: '150px',\n  color: '#17B1F9',\n  textAlign: 'center',\n  fontSize:27\n};\nfunction Login() {\n  const { Header, Content, Footer } = Layout;\n  const { Title } = Typography;\n\n  return (\n    <div>\n      <AppHeader />\n      <Content\n        style={{\n          padding: \"0 10px\",\n          marginTop: 20,\n          height: \"100%\",\n        }}\n      >\n        <Row justify=\"center\">\n          <Col span={24}>\n            <Title level={3}>Hi there, Welcome to Enclipy!</Title>\n          </Col>\n        </Row>\n        <Row justify=\"center\">\n          <Col\n            xs={{ span: 24 }}\n            sm={{ span: 24 }}\n            md={{ span: 24 }}\n            lg={{ span: 24 }}\n            xl={{ span: 24 }}\n          >\n            <Carousel autoplay >\n              <div>\n                  <Title style={introStyle}>\n              Enclipy is an end-to-end encrypted text clips sharing platform,\n              you can add clips and access them anywhere from any of your\n              devices, all with total privacy.\n            </Title>  \n              </div>\n              <div>\n                <Image width={300} src=\"/todo.svg\" />\n                <h3 style={contentStyle}>Securely store your clips</h3>\n              </div>\n              <div>\n                <Image width={300} src=\"/taking_notes.svg\" />\n                <h3 style={contentStyle}>Manage your clips with ease</h3>\n              </div>\n              <div>\n                <Image width={300} src=\"/my_files.svg\" />\n                <h3 style={contentStyle}>Your data is encrypted</h3>\n              </div>\n              <div>\n                <Image width={300} src=\"/personal_notebook.svg\" />\n                <h3 style={contentStyle}>It's your personal notebook</h3>\n              </div>\n            </Carousel>\n          </Col>\n        </Row>\n        \n            <Row justify=\"center\">\n              <Col xs={{ span: 24 }}\n            sm={{ span: 24 }}\n            md={{ span: 12 }}\n            lg={{ span: 12 }}\n            xl={{ span: 12 }}>\n                <Card bordered={false} hoverable>\n                  <Image height={150} src=\"/login.svg\" />\n                  <Title level={5}>\n                    If you already have an account <UserSwitchOutlined />\n                  </Title>\n                  <a href=\"https://enclipy-api.herokuapp.com/connect/google\">\n                    <Button type=\"primary\" icon={<GoogleOutlined />} size=\"large\" block shape=\"round\">\n                      Sign In with Google\n                    </Button>\n                  </a>\n                </Card>\n              </Col>\n              <Col xs={{ span: 24 }}\n            sm={{ span: 24 }}\n            md={{ span: 12 }}\n            lg={{ span: 12 }}\n            xl={{ span: 12 }}>\n                <Card bordered={false} hoverable>\n                  <Image height={150} src=\"/join.svg\" /> \n                  <Title level={5}>\n                    If you're new <UserAddOutlined />\n                  </Title>\n                  <a href=\"https://enclipy-api.herokuapp.com/connect/google\">\n                    <Button type=\"primary\" icon={<GoogleOutlined />} size=\"large\" block shape=\"round\">\n                      Sign Up with Google\n                    </Button>\n                  </a>\n                </Card>\n              </Col>\n            </Row>\n      </Content>\n    </div>\n  );\n}\n\nexport default Login;\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/AppRouter.js",["121"],"import React from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport Home from \"./views/Home\";\nimport Login from \"./views/Login\";\nimport LoginRedirect from \"./views/LoginRedirect\";\n\nconst fakeAuth = {\n  signedIn: true,\n};\n\nconst RequireAuth = ({ children }) => {\n  if (!localStorage.getItem('jwt')) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return children;\n};\nconst AppRouter = (props) => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/auth/google/callback\" component={LoginRedirect} />\n        <Route path=\"/login\" component={Login} />\n        <RequireAuth>\n          <Route path=\"/\" exact>\n            <Home />\n          </Route>\n        </RequireAuth>\n        \n        {/* <Route component={Error} /> */}\n      </Switch>\n    </Router>\n  );\n};\n\nexport default AppRouter;\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/GraphqlQueries.js",[],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ClipCard.js",["122","123","124","125","126","127"],"import React, { useState } from \"react\";\nimport { Card, Typography, Input, Button, message, Popconfirm } from \"antd\";\nimport { Row, Col } from \"antd\";\nimport {\n  EditOutlined,\n  DeleteOutlined,\n  CopyOutlined,\n  CloseOutlined,\n  SaveOutlined,\n} from \"@ant-design/icons\";\nimport { AES, enc } from \"crypto-js\";\nimport { useMutation } from \"@apollo/client\";\nimport { DELETE_CLIP, GET_MY_CLIPS, UPDATE_CLIP } from \"../GraphqlQueries\";\nimport { copyTextToClipboard } from \"../Utils/CopyClip\";\n\nconst decryptText = (text) => {\n  var bytes = AES.decrypt(text, \"SECRET_TOKEN\");\n  var originalText = bytes.toString(enc.Utf8);\n  return originalText;\n  // return text;\n};\nconst encryptText = (text) => {\n  return AES.encrypt(text, \"SECRET_TOKEN\").toString();\n};\n\nexport function ClipCard({ data, refetch }) {\n  const { Paragraph, Text } = Typography;\n  const { TextArea } = Input;\n  const id = data.id;\n  const encryptedData = data.data;\n  const updated_date = new Date(data.updated_at);\n  const updated_at = `${updated_date.toDateString()} at ${updated_date.toLocaleTimeString(\n    \"en-US\"\n  )}`;\n  const [dataToDisplay, setDataToDisplay] = useState(\n    decryptText(encryptedData)\n  );\n  const [editable, setEditable] = useState(false);\n  const [saveButtonLoading, setsaveButtonLoading] = useState(false);\n  const [viewDecrypted, setViewDecrypted] = useState(true);\n  const [deleteButtonLoading, setdeleteButtonLoading] = useState(false);\n\n  const [deleteClip] = useMutation(DELETE_CLIP, {\n    update(cache, { data }) {\n      const newClipFromResponse = data?.deleteClip.clip;\n      cache.evict({\n        id: \"ROOT_QUERY\",\n        fieldName: \"clip\",\n        id: newClipFromResponse.id,\n      });\n\n      //       const existingClips = cache.readQuery({\n      //         query: GET_MY_CLIPS,\n      //       });\n      //\n      //       if (existingClips && newClipFromResponse) {\n      //         var newClips = existingClips?.clips.filter(function (item) {\n      //           return item.id !== newClipFromResponse.id;\n      //         });\n      //\n      //         cache.writeQuery({\n      //           query: GET_MY_CLIPS,\n      //           data: {\n      //             clips: newClips,\n      //           },\n      //         });\n      //\n      //         refetch();\n      //       }\n      refetch();\n      message.success(\"Clip deleted!\");\n      setdeleteButtonLoading(false);\n    },\n  });\n  const [updateClip] = useMutation(UPDATE_CLIP, {\n    update(cache, { data }) {\n      // We use an update function here to write the\n      // new value of the GET_ALL_ClipS query.\n      const newClipFromResponse = data?.updateClip.clip;\n      const existingClips = cache.readQuery({\n        query: GET_MY_CLIPS,\n      });\n      if (existingClips && newClipFromResponse) {\n        var newClips = existingClips?.clips.filter(function (item) {\n          return item.id !== newClipFromResponse.id;\n        });\n\n        cache.writeQuery({\n          query: GET_MY_CLIPS,\n          data: {\n            clips: [...newClips, newClipFromResponse],\n          },\n        });\n        message.success(\"Clip updated!\");\n        refetch();\n        setsaveButtonLoading(false);\n        setEditable(false);\n      }\n      // setokButtonLoading(false);\n      // setmodalVisible(false);\n      // settextAreaValue(\"\");\n    },\n  });\n\n  const handleClick = (e) => {};\n  const copySuccess = () => {\n    message.success(\"Copied to Clipboard!\");\n  };\n\n  const copyError = () => {\n    message.error(\"Unable to Copy, Please check Clipboard permissions\");\n  };\n  const handleMouseOver = (e) => {\n    setViewDecrypted(true);\n    setDataToDisplay(decryptText(encryptedData));\n  };\n  const handleMouseOut = (e) => {\n    setViewDecrypted(false);\n    setDataToDisplay(encryptedData);\n  };\n  const onTextAreaValueChange = ({ target: { value } }) => {\n    setDataToDisplay(value);\n  };\n  const handleClipUpdate = () => {};\n  // setDataToDisplay(decryptText(encryptedData));\n  return (\n    // <Card\n    //   onClick={handleClick}\n    //   onMouseOver={handleMouseOver}\n    //   onMouseOut={handleMouseOut}\n    //   hoverable\n    //   bordered={false}\n    //   style={{ margin: \"0px\" }}\n    // >\n    <Card\n      onClick={handleClick}\n      hoverable\n      bordered={false}\n      style={{ margin: \"0px\" }}\n    >\n      {editable ? (\n        <TextArea\n          allowClear\n          value={dataToDisplay}\n          bordered={false}\n          autoSize={{ minRows: 1, maxRows: 15 }}\n          onChange={onTextAreaValueChange}\n        />\n      ) : (\n        // <TextArea  allowClear onChange={onChange} />\n        <Paragraph>{decryptText(data.data)}</Paragraph>\n      )}\n\n      <Row justify=\"center\">\n        <Col>\n          <Button\n            type=\"primary\"\n            shape=\"circle\"\n            icon={<CopyOutlined />}\n            onClick={(e) => {\n              var result = copyTextToClipboard(\n                decryptText(encryptedData),\n                copySuccess,\n                copyError\n              );\n            }}\n          />\n        </Col>\n\n        {editable ? (\n          <>\n            <Col>\n              <Button\n                type=\"default\"\n                shape=\"circle\"\n                icon={<SaveOutlined />}\n                loading={saveButtonLoading}\n                onClick={(e) => {\n                  setsaveButtonLoading(true);\n                  updateClip({\n                    variables: { id: id, data: encryptText(dataToDisplay) },\n                  });\n                  refetch();\n                }}\n              />\n            </Col>\n            <Col>\n              <Button\n                type=\"default\"\n                shape=\"circle\"\n                icon={<CloseOutlined />}\n                onClick={(e) => {\n                  setDataToDisplay(decryptText(encryptedData));\n                  setEditable(!editable);\n                }}\n              />\n            </Col>\n          </>\n        ) : (\n          <Col>\n            <Button\n              type=\"default\"\n              shape=\"circle\"\n              icon={<EditOutlined />}\n              onClick={(e) => {\n                setEditable(!editable);\n              }}\n            />\n          </Col>\n        )}\n\n        <Col span={4}>\n          <Popconfirm\n            title=\"Are you sure to delete this Clip?\"\n            onConfirm={(e) => {\n              setdeleteButtonLoading(true);\n              deleteClip({ variables: { id: id } });\n              refetch();\n            }}\n            onCancel={(e) => {\n              message.warning(\"Deletion aborted!\");\n            }}\n            okText=\"Yes\"\n            cancelText=\"No\"\n          >\n            <Button\n              type=\"danger\"\n              shape=\"circle\"\n              loading={deleteButtonLoading}\n              icon={<DeleteOutlined />}\n            />\n          </Popconfirm>\n        </Col>\n      </Row>\n      <Text type=\"secondary\" style={{ fontSize: 10 }}>\n        Last Updated: {updated_at}\n      </Text>\n    </Card>\n  );\n}\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ProfileModal.js",["128","129","130","131","132","133"],"import { Modal, Button, Tooltip, Input, Typography } from \"antd\";\nimport { UserOutlined } from \"@ant-design/icons\";\nimport React, { useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { useHistory } from \"react-router-dom\";\nimport { Descriptions } from \"antd\";\nimport { AES,enc } from \"crypto-js\";\n\nimport { CREATE_CLIP, GET_MY_CLIPS } from \"../GraphqlQueries\";\nconst decryptText = (text) => {\n  var bytes = AES.decrypt(text, localStorage.getItem(\"jwt\"));\n  var originalText = bytes.toString(enc.Utf8);\n  return originalText;\n  // return text;\n};\nexport default function ProfileModal(props) {\n  const { Title, Text } = Typography;\n  const [modalVisible, setmodalVisible] = useState(false);\n\n\n  const user = JSON.parse(decryptText(localStorage.getItem(\"user\")));\n\n  const showModal = () => {\n    setmodalVisible(!modalVisible);\n  };\n\n  return (\n    <>\n      <Tooltip title=\"Your Profile\">\n        <Button\n          shape=\"circle\"\n          type=\"primary\"\n          onClick={showModal}\n          size=\"large\"\n          icon={<UserOutlined />}\n        />\n      </Tooltip>\n      <Modal\n        visible={modalVisible}\n        onCancel={showModal}\n        title=\"Your Profile\"\n        footer={[\n          <Button key=\"submit\" type=\"primary\" onClick={showModal}>\n            Ok\n          </Button>,\n        ]}\n      >\n        <Title level={5}>\n          Signed in as {user.username}{\" \"}\n          <Button\n            danger\n            shape=\"round\"\n            icon={<UserOutlined />}\n            type=\"text\"\n            onClick={(e) => {\n              e.preventDefault();\n              localStorage.removeItem(\"jwt\");\n              localStorage.removeItem(\"username\");\n              localStorage.removeItem(\"user\");\n              window.location.href = \"/\";\n            }}\n          >\n            Logout\n          </Button>\n        </Title>\n\n        <ProfileScreen user={user} />\n        <Text type=\"secondary\">\n          These are the only details we have about you other than your encrypted\n          clips.\n        </Text>\n      </Modal>\n    </>\n  );\n}\n\nconst ProfileScreen = ({ user }) => {\n  return (\n    <div>\n      <Descriptions bordered column={1}>\n        <Descriptions.Item label=\"Username\">{user.username}</Descriptions.Item>\n        <Descriptions.Item label=\"Email\">{user.email}</Descriptions.Item>\n        <Descriptions.Item label=\"Provider\">{user.provider}</Descriptions.Item>\n        {/* <Descriptions.Item label=\"Total Clips\"> */}\n        {/*   {user.clips.length} */}\n        {/* </Descriptions.Item> */}\n      </Descriptions>\n    </div>\n  );\n};\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/SettingsModal.js",["134","135","136"],"import { Modal, Button, Tooltip, Input, Typography } from \"antd\";\nimport { SettingOutlined } from \"@ant-design/icons\";\nimport React, { useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\n\nimport { AES } from \"crypto-js\";\n\nimport { CREATE_CLIP, GET_MY_CLIPS } from \"../GraphqlQueries\";\n\nexport default function SettingsModal(props) {\n  const { Title } = Typography;\n  const { TextArea } = Input;\n  const [createClip, { data }] = useMutation(CREATE_CLIP, {\n    update(cache, { data }) {\n      // We use an update function here to write the\n      // new value of the GET_ALL_ClipS query.\n      const newClipFromResponse = data?.createClip.clip;\n      const existingClips = cache.readQuery({\n        query: GET_MY_CLIPS,\n      });\n      if (existingClips && newClipFromResponse) {\n        cache.writeQuery({\n          query: GET_MY_CLIPS,\n          data: {\n            clips: [...existingClips?.clips, newClipFromResponse],\n          },\n        });\n      }\n      // refetch();\n      setokButtonLoading(false);\n      setmodalVisible(false);\n      settextAreaValue(\"\");\n    },\n  });\n\n  const [textAreaValue, settextAreaValue] = useState(\"\");\n  const [modalVisible, setmodalVisible] = useState(false);\n  const [okButtonLoading, setokButtonLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const handleAddFromClipboard = () => {\n    navigator.clipboard\n      .readText()\n      .then((text) => {\n        settextAreaValue(text);\n      })\n      .catch((err) => {\n        console.log(err);\n        setError(true);\n      });\n  };\n\n  const showModal = () => {\n    setmodalVisible(true);\n  };\n  const encryptText = (text) => {\n    return AES.encrypt(text, \"SECRET_TOKEN\").toString();\n    // return text;\n  };\n\n  const handleOk = () => {\n    setokButtonLoading(true);\n    let oldList = data;\n    createClip({ variables: { data: encryptText(textAreaValue) } });\n  };\n\n  const handleCancel = () => {\n    setmodalVisible(false);\n  };\n  const onTextAreaValueChange = ({ target: { value } }) => {\n    settextAreaValue(value);\n  };\n\n  return (\n    <>\n      <Tooltip title=\"Settings\">\n        <Button\n          shape=\"circle\"\n          type=\"primary\"\n          onClick={showModal}\n          size=\"large\"\n          icon={<SettingOutlined />}\n        />\n      </Tooltip>\n      <Modal\n        visible={modalVisible}\n        title=\"Settings\"\n        onOk={handleOk}\n        onCancel={handleCancel}\n        footer={[\n          <Button key=\"back\" onClick={handleCancel}>\n            Cancel\n          </Button>,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            loading={okButtonLoading}\n            onClick={handleOk}\n          >\n            Add this Clip\n          </Button>,\n        ]}\n      >\n        {error ? (\n          <p>Some Error Occuerd</p>\n        ) : (\n          <>\n            <Button\n              key=\"back\"\n              type=\"dashed\"\n              block\n              onClick={handleAddFromClipboard}\n            >\n              Add From ClipBoard\n            </Button>\n            <TextArea\n              value={textAreaValue}\n              onChange={onTextAreaValueChange}\n              autoSize={{ minRows: 3, maxRows: 15 }}\n            />\n          </>\n        )}\n      </Modal>\n    </>\n  );\n}\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/LoginRedirect.js",["137"],"import React, { useEffect, useState } from \"react\";\nimport { useHistory, useLocation, useParams } from \"react-router-dom\";\nimport { Result, Button } from \"antd\";\nimport { SmileOutlined } from \"@ant-design/icons\";\nimport { AES } from \"crypto-js\";\n\nconst backendUrl = \"https://enclipy-api.herokuapp.com\";\nconst encryptText = (text,token) => {\n    return AES.encrypt(text, token).toString();\n};\nconst LoginRedirect = (props) => {\n  const [text, setText] = useState(\"Loading...\");\n  const location = useLocation();\n  const params = useParams();\n  const history = useHistory();\n\n  useEffect(() => {\n    // Successfully logged with the provider\n    // Now logging with strapi by using the access_token (given by the provider) in props.location.search\n    fetch(`${backendUrl}/auth/google/callback${location.search}`)\n      .then((res) => {\n        if (res.status !== 200) {\n          throw new Error(`Couldn't login to Strapi. Status: ${res.status}`);\n        }\n        return res;\n        \n      })\n      .then((res) => res.json())\n      .then((res) => {\n        // Successfully logged with Strapi\n        // Now saving the jwt to use it for future authenticated requests to Strapi\n        localStorage.setItem(\"jwt\", res.jwt);\n        localStorage.setItem(\"user\", encryptText(JSON.stringify(res.user),res.jwt));\n\n        setText(\n          \"You have been successfully logged in. You will be redirected in few seconds...\"\n        );\n        setTimeout(() => history.push(\"/\"), 2000); // Redirect to homepage after 3 sec\n      })\n      .catch((err) => {\n        console.log(err);\n        setText(\"An error occurred, please try again after some time.\");\n        setTimeout(() => history.push(\"/\"), 2000);\n      });\n  }, [history, location.search, params.providerName]);\n\n  return (\n    <Result\n      icon={<SmileOutlined />}\n      title={text}\n    />\n  );\n};\n\nexport default LoginRedirect;\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/Loading.js",[],{"ruleId":"138","severity":1,"message":"139","line":1,"column":17,"nodeType":"140","messageId":"141","endLine":1,"endColumn":25},{"ruleId":"138","severity":1,"message":"142","line":2,"column":7,"nodeType":"140","messageId":"141","endLine":2,"endColumn":11},{"ruleId":"138","severity":1,"message":"143","line":17,"column":9,"nodeType":"140","messageId":"141","endLine":17,"endColumn":12},{"ruleId":"138","severity":1,"message":"142","line":32,"column":7,"nodeType":"140","messageId":"141","endLine":32,"endColumn":11},{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"138","severity":1,"message":"148","line":3,"column":27,"nodeType":"140","messageId":"141","endLine":3,"endColumn":36},{"ruleId":"138","severity":1,"message":"149","line":61,"column":9,"nodeType":"140","messageId":"141","endLine":61,"endColumn":16},{"ruleId":"138","severity":1,"message":"139","line":1,"column":17,"nodeType":"140","messageId":"141","endLine":1,"endColumn":25},{"ruleId":"138","severity":1,"message":"148","line":1,"column":27,"nodeType":"140","messageId":"141","endLine":1,"endColumn":36},{"ruleId":"138","severity":1,"message":"150","line":2,"column":16,"nodeType":"140","messageId":"141","endLine":2,"endColumn":22},{"ruleId":"138","severity":1,"message":"151","line":4,"column":3,"nodeType":"140","messageId":"141","endLine":4,"endColumn":15},{"ruleId":"138","severity":1,"message":"152","line":5,"column":3,"nodeType":"140","messageId":"141","endLine":5,"endColumn":20},{"ruleId":"138","severity":1,"message":"153","line":7,"column":3,"nodeType":"140","messageId":"141","endLine":7,"endColumn":18},{"ruleId":"138","severity":1,"message":"154","line":8,"column":3,"nodeType":"140","messageId":"141","endLine":8,"endColumn":15},{"ruleId":"138","severity":1,"message":"155","line":17,"column":8,"nodeType":"140","messageId":"141","endLine":17,"endColumn":20},{"ruleId":"138","severity":1,"message":"156","line":18,"column":9,"nodeType":"140","messageId":"141","endLine":18,"endColumn":16},{"ruleId":"138","severity":1,"message":"157","line":19,"column":9,"nodeType":"140","messageId":"141","endLine":19,"endColumn":15},{"ruleId":"138","severity":1,"message":"158","line":20,"column":7,"nodeType":"140","messageId":"141","endLine":20,"endColumn":15},{"ruleId":"138","severity":1,"message":"159","line":36,"column":13,"nodeType":"140","messageId":"141","endLine":36,"endColumn":20},{"ruleId":"138","severity":1,"message":"160","line":2,"column":10,"nodeType":"140","messageId":"141","endLine":2,"endColumn":15},{"ruleId":"138","severity":1,"message":"139","line":1,"column":17,"nodeType":"140","messageId":"141","endLine":1,"endColumn":25},{"ruleId":"138","severity":1,"message":"161","line":3,"column":10,"nodeType":"140","messageId":"141","endLine":3,"endColumn":18},{"ruleId":"138","severity":1,"message":"162","line":7,"column":10,"nodeType":"140","messageId":"141","endLine":7,"endColumn":22},{"ruleId":"138","severity":1,"message":"163","line":10,"column":10,"nodeType":"140","messageId":"141","endLine":10,"endColumn":22},{"ruleId":"138","severity":1,"message":"164","line":10,"column":24,"nodeType":"140","messageId":"141","endLine":10,"endColumn":38},{"ruleId":"138","severity":1,"message":"165","line":10,"column":40,"nodeType":"140","messageId":"141","endLine":10,"endColumn":53},{"ruleId":"138","severity":1,"message":"166","line":13,"column":11,"nodeType":"140","messageId":"141","endLine":13,"endColumn":17},{"ruleId":"138","severity":1,"message":"167","line":13,"column":19,"nodeType":"140","messageId":"141","endLine":13,"endColumn":26},{"ruleId":"138","severity":1,"message":"168","line":13,"column":28,"nodeType":"140","messageId":"141","endLine":13,"endColumn":34},{"ruleId":"138","severity":1,"message":"166","line":14,"column":11,"nodeType":"140","messageId":"141","endLine":14,"endColumn":17},{"ruleId":"138","severity":1,"message":"168","line":14,"column":28,"nodeType":"140","messageId":"141","endLine":14,"endColumn":34},{"ruleId":"138","severity":1,"message":"166","line":22,"column":11,"nodeType":"140","messageId":"141","endLine":22,"endColumn":17},{"ruleId":"138","severity":1,"message":"168","line":22,"column":28,"nodeType":"140","messageId":"141","endLine":22,"endColumn":34},{"ruleId":"138","severity":1,"message":"169","line":9,"column":7,"nodeType":"140","messageId":"141","endLine":9,"endColumn":15},{"ruleId":"138","severity":1,"message":"170","line":40,"column":10,"nodeType":"140","messageId":"141","endLine":40,"endColumn":23},{"ruleId":"171","severity":1,"message":"172","line":49,"column":9,"nodeType":"173","messageId":"174","endLine":49,"endColumn":11},{"ruleId":"138","severity":1,"message":"175","line":113,"column":9,"nodeType":"140","messageId":"141","endLine":113,"endColumn":24},{"ruleId":"138","severity":1,"message":"176","line":117,"column":9,"nodeType":"140","messageId":"141","endLine":117,"endColumn":23},{"ruleId":"138","severity":1,"message":"177","line":124,"column":9,"nodeType":"140","messageId":"141","endLine":124,"endColumn":25},{"ruleId":"138","severity":1,"message":"178","line":162,"column":19,"nodeType":"140","messageId":"141","endLine":162,"endColumn":25},{"ruleId":"138","severity":1,"message":"179","line":1,"column":34,"nodeType":"140","messageId":"141","endLine":1,"endColumn":39},{"ruleId":"138","severity":1,"message":"148","line":3,"column":27,"nodeType":"140","messageId":"141","endLine":3,"endColumn":36},{"ruleId":"138","severity":1,"message":"180","line":4,"column":10,"nodeType":"140","messageId":"141","endLine":4,"endColumn":21},{"ruleId":"138","severity":1,"message":"181","line":5,"column":10,"nodeType":"140","messageId":"141","endLine":5,"endColumn":20},{"ruleId":"138","severity":1,"message":"182","line":9,"column":10,"nodeType":"140","messageId":"141","endLine":9,"endColumn":21},{"ruleId":"138","severity":1,"message":"162","line":9,"column":23,"nodeType":"140","messageId":"141","endLine":9,"endColumn":35},{"ruleId":"138","severity":1,"message":"148","line":3,"column":27,"nodeType":"140","messageId":"141","endLine":3,"endColumn":36},{"ruleId":"138","severity":1,"message":"183","line":11,"column":11,"nodeType":"140","messageId":"141","endLine":11,"endColumn":16},{"ruleId":"138","severity":1,"message":"149","line":63,"column":9,"nodeType":"140","messageId":"141","endLine":63,"endColumn":16},{"ruleId":"138","severity":1,"message":"184","line":3,"column":18,"nodeType":"140","messageId":"141","endLine":3,"endColumn":24},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'done' is defined but never used.","'msg' is assigned a value but never used.","no-native-reassign",["185"],"no-negated-in-lhs",["186"],"'useEffect' is defined but never used.","'oldList' is assigned a value but never used.","'Switch' is defined but never used.","'UserOutlined' is defined but never used.","'PlusCircleTwoTone' is defined but never used.","'SettingOutlined' is defined but never used.","'LockOutlined' is defined but never used.","'ToggleButton' is defined but never used.","'SubMenu' is assigned a value but never used.","'Search' is assigned a value but never used.","'onSearch' is assigned a value but never used.","'current' is assigned a value but never used.","'Radio' is defined but never used.","'useQuery' is defined but never used.","'GET_MY_CLIPS' is defined but never used.","'ApolloClient' is defined but never used.","'createHttpLink' is defined but never used.","'InMemoryCache' is defined but never used.","'Header' is assigned a value but never used.","'Content' is assigned a value but never used.","'Footer' is assigned a value but never used.","'fakeAuth' is assigned a value but never used.","'viewDecrypted' is assigned a value but never used.","no-dupe-keys","Duplicate key 'id'.","ObjectExpression","unexpected","'handleMouseOver' is assigned a value but never used.","'handleMouseOut' is assigned a value but never used.","'handleClipUpdate' is assigned a value but never used.","'result' is assigned a value but never used.","'Input' is defined but never used.","'useMutation' is defined but never used.","'useHistory' is defined but never used.","'CREATE_CLIP' is defined but never used.","'Title' is assigned a value but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation"]