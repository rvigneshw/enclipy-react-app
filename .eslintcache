[{"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/CardList.js":"1","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/Utils/CopyClip.js":"2","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ClipBoardModal.js":"3","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/index.js":"4","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/GraphqlClient.js":"5","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/AppHeader.js":"6","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/reportWebVitals.js":"7","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ToggleButton.js":"8","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/App.js":"9","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/Home.js":"10","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/Login.js":"11"},{"size":3853,"mtime":1606994744250,"results":"12","hashOfConfig":"13"},{"size":1172,"mtime":1606993726450,"results":"14","hashOfConfig":"13"},{"size":3515,"mtime":1607005948260,"results":"15","hashOfConfig":"13"},{"size":1132,"mtime":1607002351690,"results":"16","hashOfConfig":"13"},{"size":1062,"mtime":1607002247900,"results":"17","hashOfConfig":"13"},{"size":1727,"mtime":1607007193440,"results":"18","hashOfConfig":"13"},{"size":362,"mtime":1606630090938,"results":"19","hashOfConfig":"13"},{"size":503,"mtime":1606645215030,"results":"20","hashOfConfig":"13"},{"size":1476,"mtime":1607007212340,"results":"21","hashOfConfig":"13"},{"size":168,"mtime":1606741068930,"results":"22","hashOfConfig":"13"},{"size":107,"mtime":1606642426630,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},"aay21l",{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/CardList.js",["57","58","59","60","61"],"import React, { useState } from \"react\";\nimport {\n  Card,\n  List,\n  Typography,\n  Input,\n  Button,\n  message,\n  Popconfirm,\n} from \"antd\";\nimport { Row, Col } from \"antd\";\nimport { EditOutlined, DeleteOutlined, CopyOutlined } from \"@ant-design/icons\";\nimport { AES, enc } from \"crypto-js\";\nimport { useMutation } from \"@apollo/client\";\nimport { DELETE_CLIP, GET_MY_CLIPS } from \"../GraphqlQueries\";\nimport { copyTextToClipboard } from \"../Utils/CopyClip\";\n\nconst gridConfig = {\n  gutter: 16,\n  xs: 1,\n  sm: 2,\n  md: 4,\n  lg: 4,\n  xl: 5,\n  xxl: 6,\n};\n\nconst ClipCard = (props) => {\n  const { Paragraph } = Typography;\n  const { TextArea } = Input;\n  const id = props.data.id;\n  const encryptedData = props.data.data;\n  const [dataToDisplay, setDataToDisplay] = useState(encryptedData);\n  const [editable, setEditable] = useState(true);\n  const [viewDecrypted, setViewDecrypted] = useState(false);\n  const [deleteButtonLoading, setdeleteButtonLoading] = useState(false);\n\n  const [deleteClip, { data }] = useMutation(DELETE_CLIP, {\n    update(cache, { data }) {\n      const newClipFromResponse = data?.deleteClip.clip;\n      cache.evict({ id: newClipFromResponse.id });\n\n      const existingClips = cache.readQuery({\n        query: GET_MY_CLIPS,\n      });\n\n      if (existingClips && newClipFromResponse) {\n        var newClips = existingClips?.clips.filter(function (item) {\n          return item.id !== newClipFromResponse.id;\n        });\n\n        cache.writeQuery({\n          query: GET_MY_CLIPS,\n          data: {\n            clips: newClips,\n          },\n        });\n      }\n      message.success(\"Clip deleted!\");\n      setdeleteButtonLoading(false);\n    },\n  });\n\n  const handleClick = (e) => {};\n  const copySuccess = () => {\n    message.success(\"Copied to Clipboard!\");\n  };\n\n  const copyError = () => {\n    message.error(\"Unable to Copy, Please check Clipboard permissions\");\n  };\n  const handleMouseOver = (e) => {\n    setViewDecrypted(true);\n    setDataToDisplay(decryptText(encryptedData));\n  };\n  const handleMouseOut = (e) => {\n    setViewDecrypted(false);\n    setDataToDisplay(encryptedData);\n  };\n  const decryptText = (text) => {\n    var bytes = AES.decrypt(text, \"SECRET_TOKEN\");\n    var originalText = bytes.toString(enc.Utf8);\n    return originalText;\n  };\n\n  return (\n    <Card\n      onClick={handleClick}\n      onMouseOver={handleMouseOver}\n      onMouseOut={handleMouseOut}\n      hoverable\n      bordered={false}\n      style={{ margin: \"0px\" }}\n    >\n      {editable ? (\n        <Paragraph>{dataToDisplay}</Paragraph>\n      ) : (\n        <TextArea></TextArea>\n      )}\n      <Button\n        type=\"primary\"\n        shape=\"circle\"\n        icon={<CopyOutlined />}\n        onClick={(e) => {\n          var result = copyTextToClipboard(\n            decryptText(encryptedData),\n            copySuccess,\n            copyError\n          );\n        }}\n      />\n      <Button\n        type=\"default\"\n        shape=\"circle\"\n        icon={<EditOutlined />}\n        onClick={(e) => {\n          setEditable(!editable);\n        }}\n      />\n      <Popconfirm\n        title=\"Are you sure to delete this Clip?\"\n        onConfirm={(e) => {\n          setdeleteButtonLoading(true);\n          deleteClip({ variables: { id: id } });\n        }}\n        onCancel={(e) => {\n          message.warning(\"Deletion aborted!\");\n        }}\n        okText=\"Yes\"\n        cancelText=\"No\"\n      >\n        <Button\n          type=\"danger\"\n          shape=\"circle\"\n          loading={deleteButtonLoading}\n          icon={<DeleteOutlined />}\n        />\n      </Popconfirm>\n      ,\n    </Card>\n  );\n};\nexport default function CardList(props) {\n  return (\n    <List\n      grid={gridConfig}\n      dataSource={props.data}\n      renderItem={(item) => (\n        <List.Item style={{ padding: \"0px\" }}>\n          <ClipCard data={item} />\n        </List.Item>\n      )}\n    />\n  );\n}\n",["62","63"],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/Utils/CopyClip.js",["64","65"],"const fallbackCopyTextToClipboard = (text,success,error) => {\n  let done;\n  var textArea = document.createElement(\"textarea\");\n  textArea.value = text;\n\n  // Avoid scrolling to bottom\n  textArea.style.top = \"0\";\n  textArea.style.left = \"0\";\n  textArea.style.position = \"fixed\";\n\n  document.body.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    var successful = document.execCommand(\"copy\");\n    var msg = successful ? \"successful\" : \"unsuccessful\";\n    console.log(\"Fallback: Copying text command was \" + msg);\n    if(successful){\nsuccess();\n    }else{\n      error()\n    }\n  } catch (err) {\n    error();\n    console.error(\"Fallback: Oops, unable to copy\", err);\n  }\n\n  document.body.removeChild(textArea);\n};\nexport const copyTextToClipboard = (text,success,error) => {\n  let done;\n  if (!navigator.clipboard) {\n    fallbackCopyTextToClipboard(text,success,error);\n    return;\n  }\n  navigator.clipboard.writeText(text).then(\n    function () {\n      success();\n      console.log(\"Async: Copying to clipboard was successful!\");\n    },\n    function (err) {\n      error();\n      console.error(\"Async: Could not copy text: \", err);\n    }\n  );\n  \n};\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ClipBoardModal.js",["66","67","68"],"import { Modal, Button, Tooltip, Input } from \"antd\";\nimport {\n  \n  PlusCircleOutlined,\n  \n} from \"@ant-design/icons\";\nimport React, { useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { useOfflineMutation } from \"react-offix-hooks\";\n\nimport { AES } from \"crypto-js\";\n\nimport { CREATE_CLIP, GET_MY_CLIPS } from \"../GraphqlQueries\";\n\nexport default function ClipBoardModal({ refetch }) {\n//   const [addClip] = useOfflineMutation(CREATE_CLIP);\n// \n//   async function handleSubmit() {\n//     try {\n//       await addClip({ variables: { data: encryptText(textAreaValue) } });\n//     } catch (error) {\n//       if (error.offline) {\n//         error.watchOfflineChange();\n//       }\n//     }\n//   }\n\n  const { TextArea } = Input;\n  const [createClip, { data }] = useMutation(CREATE_CLIP, {\n    update(cache, { data }) {\n      // We use an update function here to write the\n      // new value of the GET_ALL_ClipS query.\n      const newClipFromResponse = data?.createClip.clip;\n      const existingClips = cache.readQuery({\n        query: GET_MY_CLIPS,\n      });\n      if (existingClips && newClipFromResponse) {\n        cache.writeQuery({\n          query: GET_MY_CLIPS,\n          data: {\n            clips: [...existingClips?.clips, newClipFromResponse],\n          },\n        });\n      }\n      setokButtonLoading(false);\n      setmodalVisible(false);\n      settextAreaValue(\"\");\n    },\n  });\n\n  const [textAreaValue, settextAreaValue] = useState(\"\");\n  const [modalVisible, setmodalVisible] = useState(false);\n  const [okButtonLoading, setokButtonLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const handleAddFromClipboard = () => {\n    navigator.clipboard\n      .readText()\n      .then((text) => {\n        settextAreaValue(text);\n      })\n      .catch((err) => {\n        console.log(err);\n        setError(true);\n      });\n  };\n\n  const showModal = () => {\n    setmodalVisible(true);\n  };\n  const encryptText = (text) => {\n    return AES.encrypt(text, \"SECRET_TOKEN\").toString();\n  };\n\n  const handleOk = () => {\n    setokButtonLoading(true);\n    let oldList = data;\n    createClip({ variables: { data: encryptText(textAreaValue) } });\n  };\n\n  const handleCancel = () => {\n    setmodalVisible(false);\n  };\n  const onTextAreaValueChange = ({ target: { value } }) => {\n    settextAreaValue(value);\n  };\n\n  return (\n    <>\n      <Tooltip title=\"Add Clip\">\n        <Button shape=\"circle\" type=\"primary\" onClick={showModal} size=\"large\" icon={<PlusCircleOutlined />}/>\n      </Tooltip>\n      <Modal\n        visible={modalVisible}\n        title=\"Title\"\n        onOk={handleOk}\n        onCancel={handleCancel}\n        footer={[\n          <Button key=\"back\" onClick={handleCancel}>\n            Cancel\n          </Button>,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            loading={okButtonLoading}\n            onClick={handleOk}\n          >\n            Add this Clip\n          </Button>,\n        ]}\n      >\n        {error ? (\n          <p>Some Error Occuerd</p>\n        ) : (\n          <>\n            <Button\n              key=\"back\"\n              type=\"dashed\"\n              block\n              onClick={handleAddFromClipboard}\n            >\n              Add From ClipBoard\n            </Button>\n            <TextArea\n              value={textAreaValue}\n              onChange={onTextAreaValueChange}\n              autoSize={{ minRows: 3, maxRows: 15 }}\n            />\n          </>\n        )}\n      </Modal>\n    </>\n  );\n}\n",["69","70"],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/index.js",["71"],"import React, { useState, useEffect } from \"react\";\nimport { render } from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ApolloOfflineClient } from \"offix-client\";\nimport { ApolloOfflineProvider } from \"react-offix-hooks\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport { client } from \"./GraphqlClient\";\n\nconst Root = () => {\n  const [initialized, setInitialized] = useState(false);\n\n  // initialize the offix client and set the apollo client\n  useEffect(() => {\n    client.init().then(() => setInitialized(true));\n  }, []);\n\n  if (initialized) {\n    return (\n      <ApolloOfflineProvider client={client}>\n        <ApolloProvider client={client}>\n          <App />\n        </ApolloProvider>\n      </ApolloOfflineProvider>\n    );\n  }\n  return <h2>Loading...</h2>;\n};\n\nrender(<Root />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["72","73"],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/GraphqlClient.js",["74"],"import { ApolloClient, createHttpLink, InMemoryCache } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { ApolloOfflineClient, createDefaultCacheStorage } from \"offix-client\";\nimport { CachePersistor } from \"apollo-cache-persist\";\n\nconst httpLink = createHttpLink({\n  uri: \"https://enclipy-api.herokuapp.com/graphql\",\n});\nconst cache = new InMemoryCache();\n\nconst authLink = setContext((_, { headers }) => {\n  // const token = localStorage.getItem('token');\n  const token =\n    \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjA2OTA3NTE0LCJleHAiOjE2MDk0OTk1MTR9.ajm_sR-hn7p191tA36zCQGxNspiCFn2gJtzOKl-MQrU\";\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst cachePersistor = new CachePersistor({\n  cache,\n  storage: createDefaultCacheStorage(),\n});\n\nconst link = authLink.concat(httpLink);\nexport const client = new ApolloOfflineClient({\n  cache,\n  cachePersistor,\n  link,\n});\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/AppHeader.js",["75","76","77","78","79"],"import React from \"react\";\nimport { Menu, Switch, Button } from \"antd\";\nimport {\n  UserOutlined,\n  PlusCircleTwoTone,\n  SearchOutlined,\n  SettingOutlined,\n} from \"@ant-design/icons\";\nimport { Row, Col } from \"antd\";\n\nimport ClipBoardModal from \"./ClipBoardModal\";\nimport ToggleButton from \"./ToggleButton\";\nconst { SubMenu } = Menu;\n\nexport default class AppHeader extends React.Component {\n  state = {\n    current: \"mail\",\n    themeMode: \"light\",\n  };\n\n  handleClick = (e) => {\n    switch (e.key) {\n      case \"enterText\":\n        let oldList2 = this.props.data;\n        this.props.setData(\n          oldList2.concat({\n            title: \"Title enterText\",\n          })\n        );\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  changeTheme = (e) => {\n    this.setState({ themeMode: e.value ? \"dark\" : \"light\" });\n  };\n\n  render() {\n    const { current } = this.state;\n\n    return (\n      <Row justify=\"center\">\n        <Col xs={{ span: 4 }} lg={{ span: 1 }}>\n          <Button\n            type=\"primary\"\n            shape=\"circle\"\n            icon={<UserOutlined />}\n            size=\"large\"\n          />\n        </Col>\n        <Col xs={{ span: 4 }} lg={{ span: 1 }}>\n          <Button\n            type=\"primary\"\n            shape=\"circle\"\n            icon={<SettingOutlined />}\n            size=\"large\"\n          />\n        </Col>\n        <Col xs={{ span: 4 }} lg={{ span: 1 }}>\n          <Button\n            type=\"primary\"\n            shape=\"circle\"\n            icon={<SearchOutlined />}\n            size=\"large\"\n          />\n        </Col>\n        <Col xs={{ span: 4 }} lg={{ span: 1 }}>\n          <ClipBoardModal data={this.props.data} refetch={this.props.refetch} />\n        </Col>\n      </Row>\n    );\n  }\n}\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/reportWebVitals.js",[],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ToggleButton.js",["80"],"import React from \"react\";\nimport { Radio, Button } from \"antd\";\n\nexport default class ToggleButton extends React.Component {\n  state = {\n    darkMode: false,\n  };\n\n  changeTheme = () => {\n    this.setState({\n      darkMode: !this.state.darkMode,\n    });\n  };\n\n  render() {\n    return (\n        <Button\n          type=\"primary\"\n          onClick={this.changeTheme}\n          style={{ marginTop: 16 }}\n        >\n          {this.state.darkMode ? \"Light Mode\" : \"Dark Mode\"}\n        </Button>\n    );\n  }\n}\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/App.js",["81","82","83","84","85","86","87","88"],"import React, { useState } from \"react\";\nimport { Layout } from \"antd\";\nimport { useQuery } from \"@apollo/client\";\n\nimport AppRouter from \"./AppRouter\";\nimport AppHeader from \"./components/AppHeader\";\nimport { GET_MY_CLIPS } from \"./GraphqlQueries\";\nimport \"./App.css\";\n\nimport { ApolloClient, createHttpLink, InMemoryCache } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { useNetworkStatus } from \"react-offix-hooks\";\nconst App = () => {\n  const { Header, Content, Footer } = Layout;\n  const { loading, error, data, refetch } = useQuery(GET_MY_CLIPS);\n  const isOnline = useNetworkStatus();\n  if (loading) return \"Loading...\";\n  if (error) return `Error! ${error.message}`;\n\n  return (\n    <div className=\"App\">\n      <Layout className=\"layout\">\n        <p>isOnline</p>\n        <AppHeader refetch={refetch} data={data.clips} />\n        <Content\n          style={{\n            padding: \"0 10px\",\n            marginTop: 50,\n            height: \"100%\",\n          }}\n        >\n          <AppRouter refetch={refetch} data={data.clips} />\n        </Content>\n        {/* <Footer */}\n        {/*   style={{ */}\n        {/*     position: \"sticky\", */}\n        {/*     bottom: \"0\", */}\n        {/*     height: \"50px\", */}\n        {/*     padding: \"0px\", */}\n        {/*     background: \"#FFFFFF00\", */}\n        {/*   }} */}\n        {/* > */}\n        {/*    */}\n        {/* </Footer> */}\n      </Layout>\n    </div>\n  );\n};\n\nexport default App;\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/Home.js",[],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/Login.js",[],{"ruleId":"89","severity":1,"message":"90","line":11,"column":10,"nodeType":"91","messageId":"92","endLine":11,"endColumn":13},{"ruleId":"89","severity":1,"message":"93","line":11,"column":15,"nodeType":"91","messageId":"92","endLine":11,"endColumn":18},{"ruleId":"89","severity":1,"message":"94","line":35,"column":10,"nodeType":"91","messageId":"92","endLine":35,"endColumn":23},{"ruleId":"89","severity":1,"message":"95","line":38,"column":24,"nodeType":"91","messageId":"92","endLine":38,"endColumn":28},{"ruleId":"89","severity":1,"message":"96","line":105,"column":15,"nodeType":"91","messageId":"92","endLine":105,"endColumn":21},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"89","severity":1,"message":"101","line":2,"column":7,"nodeType":"91","messageId":"92","endLine":2,"endColumn":11},{"ruleId":"89","severity":1,"message":"101","line":32,"column":7,"nodeType":"91","messageId":"92","endLine":32,"endColumn":11},{"ruleId":"89","severity":1,"message":"102","line":7,"column":27,"nodeType":"91","messageId":"92","endLine":7,"endColumn":36},{"ruleId":"89","severity":1,"message":"103","line":9,"column":10,"nodeType":"91","messageId":"92","endLine":9,"endColumn":28},{"ruleId":"89","severity":1,"message":"104","line":77,"column":9,"nodeType":"91","messageId":"92","endLine":77,"endColumn":16},{"ruleId":"97","replacedBy":"105"},{"ruleId":"99","replacedBy":"106"},{"ruleId":"89","severity":1,"message":"107","line":6,"column":10,"nodeType":"91","messageId":"92","endLine":6,"endColumn":29},{"ruleId":"97","replacedBy":"108"},{"ruleId":"99","replacedBy":"109"},{"ruleId":"89","severity":1,"message":"110","line":1,"column":10,"nodeType":"91","messageId":"92","endLine":1,"endColumn":22},{"ruleId":"89","severity":1,"message":"111","line":2,"column":16,"nodeType":"91","messageId":"92","endLine":2,"endColumn":22},{"ruleId":"89","severity":1,"message":"112","line":5,"column":3,"nodeType":"91","messageId":"92","endLine":5,"endColumn":20},{"ruleId":"89","severity":1,"message":"113","line":12,"column":8,"nodeType":"91","messageId":"92","endLine":12,"endColumn":20},{"ruleId":"89","severity":1,"message":"114","line":13,"column":9,"nodeType":"91","messageId":"92","endLine":13,"endColumn":16},{"ruleId":"89","severity":1,"message":"115","line":42,"column":13,"nodeType":"91","messageId":"92","endLine":42,"endColumn":20},{"ruleId":"89","severity":1,"message":"116","line":2,"column":10,"nodeType":"91","messageId":"92","endLine":2,"endColumn":15},{"ruleId":"89","severity":1,"message":"117","line":1,"column":17,"nodeType":"91","messageId":"92","endLine":1,"endColumn":25},{"ruleId":"89","severity":1,"message":"110","line":10,"column":10,"nodeType":"91","messageId":"92","endLine":10,"endColumn":22},{"ruleId":"89","severity":1,"message":"118","line":10,"column":24,"nodeType":"91","messageId":"92","endLine":10,"endColumn":38},{"ruleId":"89","severity":1,"message":"119","line":10,"column":40,"nodeType":"91","messageId":"92","endLine":10,"endColumn":53},{"ruleId":"89","severity":1,"message":"120","line":11,"column":10,"nodeType":"91","messageId":"92","endLine":11,"endColumn":20},{"ruleId":"89","severity":1,"message":"121","line":14,"column":11,"nodeType":"91","messageId":"92","endLine":14,"endColumn":17},{"ruleId":"89","severity":1,"message":"122","line":14,"column":28,"nodeType":"91","messageId":"92","endLine":14,"endColumn":34},{"ruleId":"89","severity":1,"message":"123","line":16,"column":9,"nodeType":"91","messageId":"92","endLine":16,"endColumn":17},"no-unused-vars","'Row' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.","'viewDecrypted' is assigned a value but never used.","'data' is assigned a value but never used.","'result' is assigned a value but never used.","no-native-reassign",["124"],"no-negated-in-lhs",["125"],"'done' is defined but never used.","'useEffect' is defined but never used.","'useOfflineMutation' is defined but never used.","'oldList' is assigned a value but never used.",["124"],["125"],"'ApolloOfflineClient' is defined but never used.",["124"],["125"],"'ApolloClient' is defined but never used.","'Switch' is defined but never used.","'PlusCircleTwoTone' is defined but never used.","'ToggleButton' is defined but never used.","'SubMenu' is assigned a value but never used.","'current' is assigned a value but never used.","'Radio' is defined but never used.","'useState' is defined but never used.","'createHttpLink' is defined but never used.","'InMemoryCache' is defined but never used.","'setContext' is defined but never used.","'Header' is assigned a value but never used.","'Footer' is assigned a value but never used.","'isOnline' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]