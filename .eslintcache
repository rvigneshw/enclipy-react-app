[{"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/CardList.js":"1","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/Utils/CopyClip.js":"2","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ClipBoardModal.js":"3","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/index.js":"4","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/GraphqlClient.js":"5","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/AppHeader.js":"6","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/reportWebVitals.js":"7","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ToggleButton.js":"8","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/App.js":"9","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/Home.js":"10","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/Login.js":"11","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/AppRouter.js":"12","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/GraphqlQueries.js":"13","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ClipCard.js":"14","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ProfileModal.js":"15","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/SettingsModal.js":"16","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/LoginRedirect.js":"17","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/Loading.js":"18"},{"size":507,"mtime":1607661569860,"results":"19","hashOfConfig":"20"},{"size":1198,"mtime":1607427374901,"results":"21","hashOfConfig":"20"},{"size":3140,"mtime":1607513413420,"results":"22","hashOfConfig":"20"},{"size":1194,"mtime":1607405539130,"results":"23","hashOfConfig":"20"},{"size":688,"mtime":1607514841470,"results":"24","hashOfConfig":"20"},{"size":4234,"mtime":1607662086530,"results":"25","hashOfConfig":"20"},{"size":362,"mtime":1606630090938,"results":"26","hashOfConfig":"20"},{"size":489,"mtime":1607405981880,"results":"27","hashOfConfig":"20"},{"size":876,"mtime":1607614362360,"results":"28","hashOfConfig":"20"},{"size":804,"mtime":1607662013460,"results":"29","hashOfConfig":"20"},{"size":1364,"mtime":1607614507320,"results":"30","hashOfConfig":"20"},{"size":958,"mtime":1607515469830,"results":"31","hashOfConfig":"20"},{"size":751,"mtime":1607409236080,"results":"32","hashOfConfig":"20"},{"size":6148,"mtime":1607493076030,"results":"33","hashOfConfig":"20"},{"size":1670,"mtime":1607663675010,"results":"34","hashOfConfig":"20"},{"size":3230,"mtime":1607619872000,"results":"35","hashOfConfig":"20"},{"size":1867,"mtime":1607662740660,"results":"36","hashOfConfig":"20"},{"size":3324,"mtime":1607610719600,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1fixph7",{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"43"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"43"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"43"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"43"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"43"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"43"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"43"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"43"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/CardList.js",["84"],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/Utils/CopyClip.js",["85","86","87"],"const fallbackCopyTextToClipboard = (text, success, error) => {\n  let done;\n  var textArea = document.createElement(\"textarea\");\n  textArea.value = text;\n\n  // Avoid scrolling to bottom\n  textArea.style.top = \"0\";\n  textArea.style.left = \"0\";\n  textArea.style.position = \"fixed\";\n\n  document.body.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    var successful = document.execCommand(\"copy\");\n    var msg = successful ? \"successful\" : \"unsuccessful\";\n    // console.log(\"Fallback: Copying text command was \" + msg);\n    if (successful) {\n      success();\n    } else {\n      error();\n    }\n  } catch (err) {\n    error();\n    // console.error(\"Fallback: Oops, unable to copy\", err);\n  }\n\n  document.body.removeChild(textArea);\n};\nexport const copyTextToClipboard = (text, success, error) => {\n  let done;\n  if (!navigator.clipboard) {\n    fallbackCopyTextToClipboard(text, success, error);\n    return;\n  }\n  navigator.clipboard.writeText(text).then(\n    function () {\n      success();\n      // console.log(\"Async: Copying to clipboard was successful!\");\n    },\n    function (err) {\n      error();\n      // console.error(\"Async: Could not copy text: \", err);\n    }\n  );\n};\n",["88","89"],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ClipBoardModal.js",["90","91"],"import { Modal, Button, Tooltip, Input } from \"antd\";\nimport { PlusCircleOutlined } from \"@ant-design/icons\";\nimport React, { useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\n\nimport { AES } from \"crypto-js\";\n\nimport { CREATE_CLIP, GET_MY_CLIPS } from \"../GraphqlQueries\";\n\nexport default function ClipBoardModal(props) {\n  \n  const { TextArea } = Input;\n  const [createClip, { data }] = useMutation(CREATE_CLIP, {\n    update(cache, { data }) {\n      const newClipFromResponse = data?.createClip.clip;\n      const existingClips = cache.readQuery({\n        query: GET_MY_CLIPS,\n      });\n      if (existingClips && newClipFromResponse) {\n        cache.writeQuery({\n          query: GET_MY_CLIPS,\n          data: {\n            clips: [...existingClips?.clips, newClipFromResponse],\n          },\n        });\n      }\n      // refetch();\n      setokButtonLoading(false);\n      setmodalVisible(false);\n      settextAreaValue(\"\");\n    },\n  });\n\n  const [textAreaValue, settextAreaValue] = useState(\"\");\n  const [modalVisible, setmodalVisible] = useState(false);\n  const [okButtonLoading, setokButtonLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const handleAddFromClipboard = () => {\n    navigator.clipboard\n      .readText()\n      .then((text) => {\n        settextAreaValue(text);\n      })\n      .catch((err) => {\n        console.log(err);\n        setError(true);\n      });\n  };\n\n  const showModal = () => {\n    setmodalVisible(true);\n  };\n  const encryptText = (text) => {\n    return AES.encrypt(text, \"SECRET_TOKEN\").toString();\n    // return text;\n  };\n\n  const handleOk = () => {\n    setokButtonLoading(true);\n    let oldList = data;\n    createClip({ variables: { data: encryptText(textAreaValue) } });\n  };\n\n  const handleCancel = () => {\n    setmodalVisible(false);\n  };\n  const onTextAreaValueChange = ({ target: { value } }) => {\n    settextAreaValue(value);\n  };\n\n  return (\n    <>\n      <Tooltip title=\"Add Clip\">\n        <Button\n          shape=\"circle\"\n          type=\"primary\"\n          onClick={showModal}\n          size=\"large\"\n          icon={<PlusCircleOutlined />}\n        />\n      </Tooltip>\n      <Modal\n        visible={modalVisible}\n        title=\"Add Clip\"\n        onOk={handleOk}\n        onCancel={handleCancel}\n        footer={[\n          <Button key=\"back\" onClick={handleCancel}>\n            Cancel\n          </Button>,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            loading={okButtonLoading}\n            onClick={handleOk}\n          >\n            Add this Clip\n          </Button>,\n        ]}\n      >\n        {error ? (\n          <p>Some Error Occuerd</p>\n        ) : (\n          <>\n            <Button\n              key=\"back\"\n              type=\"dashed\"\n              block\n              onClick={handleAddFromClipboard}\n            >\n              Add From ClipBoard\n            </Button>\n            <TextArea\n              value={textAreaValue}\n              onChange={onTextAreaValueChange}\n              autoSize={{ minRows: 3, maxRows: 15 }}\n            />\n          </>\n        )}\n      </Modal>\n    </>\n  );\n}\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/index.js",["92","93"],"import React, { useState, useEffect } from \"react\";\nimport { render } from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { ApolloProvider } from \"@apollo/client\";\nimport { client } from \"./GraphqlClient\";\n\nconst Root = () => {\n  //   const [initialized, setInitialized] = useState(false);\n  //\n  //   // initialize the offix client and set the apollo client\n  //   useEffect(() => {\n  //     client.init().then(() => setInitialized(true));\n  //   }, []);\n  //\n  //   if (initialized) {\n  //     return (\n  //       <ApolloOfflineProvider client={client}>\n  //         <ApolloProvider client={client}>\n  //           <App />\n  //         </ApolloProvider>\n  //       </ApolloOfflineProvider>\n  //     );\n  //   }\n  //   return <h2>Loading...</h2>;\n  return (\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  );\n};\n\nrender(<Root />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/GraphqlClient.js",[],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/AppHeader.js",["94","95","96","97","98","99","100"],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/reportWebVitals.js",[],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ToggleButton.js",["101"],"import React from \"react\";\nimport { Radio, Button } from \"antd\";\n\nexport default class ToggleButton extends React.Component {\n  state = {\n    darkMode: false,\n  };\n\n  changeTheme = () => {\n    this.setState({\n      darkMode: !this.state.darkMode,\n    });\n  };\n\n  render() {\n    return (\n      <Button\n        type=\"primary\"\n        onClick={this.changeTheme}\n        style={{ marginTop: 16 }}\n      >\n        {this.state.darkMode ? \"Light Mode\" : \"Dark Mode\"}\n      </Button>\n    );\n  }\n}\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/App.js",["102","103","104","105","106","107","108","109","110"],"import React, { useState } from \"react\";\nimport { Layout } from \"antd\";\nimport { useQuery } from \"@apollo/client\";\n\nimport AppRouter from \"./AppRouter\";\n\nimport { GET_MY_CLIPS } from \"./GraphqlQueries\";\nimport \"./App.css\";\n\nimport { ApolloClient, createHttpLink, InMemoryCache } from \"@apollo/client\";\n\nconst App = () => {\n  const { Header, Content, Footer } = Layout;\n\n  return (\n    <div className=\"App\">\n      <Layout className=\"layout\" style={{ background: \"#FFF\" }}>\n        <AppRouter />\n\n        {/* <Footer */}\n        {/*   style={{ */}\n        {/*     position: \"sticky\", */}\n        {/*     bottom: \"0\", */}\n        {/*     height: \"50px\", */}\n        {/*     padding: \"0px\", */}\n        {/*     background: \"#FFFFFF00\", */}\n        {/*   }} */}\n        {/* > */}\n        {/*    */}\n        {/* </Footer> */}\n      </Layout>\n    </div>\n  );\n};\n\nexport default App;\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/Home.js",["111","112","113"],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/Login.js",["114","115"],"import React from \"react\";\nimport { Row, Col, Card } from \"antd\";\nimport { GoogleOutlined } from \"@ant-design/icons\";\nimport { Button } from \"antd\";\nimport AppHeader from \"../components/AppHeader\";\nimport { Layout } from \"antd\";\nfunction Login() {\n  const { Header, Content, Footer } = Layout;\n  return (\n    <div>\n      <AppHeader />\n      <Content\n        style={{\n          padding: \"0 10px\",\n          marginTop: 20,\n          height: \"100%\",\n        }}\n      >\n        <Row justify=\"center\">\n          <Col span={6}>\n            <Card bordered={false} hoverable>\n              <p>Card content</p>\n              <p>Card content</p>\n              <a href=\"https://enclipy-api.herokuapp.com/connect/google\">\n                <Button type=\"primary\" icon={<GoogleOutlined />}>\n                  Login with Google\n                </Button>\n              </a>\n            </Card>\n          </Col>\n          <Col span={6}>\n            <Card bordered={false} hoverable>\n              <p>Card content</p>\n              <p>Card content</p>\n              <a href=\"https://enclipy-api.herokuapp.com/connect/google\">\n                <Button type=\"primary\" icon={<GoogleOutlined />}>\n                  Login with Google\n                </Button>\n              </a>\n            </Card>\n          </Col>\n        </Row>\n      </Content>\n    </div>\n  );\n}\n\nexport default Login;\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/AppRouter.js",["116"],"import React from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport Home from \"./views/Home\";\nimport Login from \"./views/Login\";\nimport LoginRedirect from \"./views/LoginRedirect\";\n\nconst fakeAuth = {\n  signedIn: true,\n};\n\nconst RequireAuth = ({ children }) => {\n  // const [isLogged, setIsLogged] = useState(!!localStorage.getItem('jwt'));\n  if (!localStorage.getItem('jwt')) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return children;\n};\nconst AppRouter = (props) => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/auth/google/callback\" component={LoginRedirect} />\n        <Route path=\"/login\" component={Login} />\n        <RequireAuth>\n          <Route path=\"/\" exact>\n            <Home />\n          </Route>\n        </RequireAuth>\n        \n        {/* <Route component={Error} /> */}\n      </Switch>\n    </Router>\n  );\n};\n\nexport default AppRouter;\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/GraphqlQueries.js",[],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ClipCard.js",["117","118","119","120","121","122"],"import React, { useState } from \"react\";\nimport { Card, Typography, Input, Button, message, Popconfirm } from \"antd\";\nimport {\n  EditOutlined,\n  DeleteOutlined,\n  CopyOutlined,\n  CloseOutlined,\n  SaveOutlined,\n} from \"@ant-design/icons\";\nimport { AES, enc } from \"crypto-js\";\nimport { useMutation } from \"@apollo/client\";\nimport { DELETE_CLIP, GET_MY_CLIPS, UPDATE_CLIP } from \"../GraphqlQueries\";\nimport { copyTextToClipboard } from \"../Utils/CopyClip\";\n\nconst decryptText = (text) => {\n  var bytes = AES.decrypt(text, \"SECRET_TOKEN\");\n  var originalText = bytes.toString(enc.Utf8);\n  return originalText;\n  // return text;\n};\nconst encryptText = (text) => {\n  return AES.encrypt(text, \"SECRET_TOKEN\").toString();\n};\n\nexport function ClipCard({ data, refetch }) {\n  const { Paragraph } = Typography;\n  const { TextArea } = Input;\n  const id = data.id;\n  const encryptedData = data.data;\n  const [dataToDisplay, setDataToDisplay] = useState(\n    decryptText(encryptedData)\n  );\n  const [editable, setEditable] = useState(false);\n  const [saveButtonLoading, setsaveButtonLoading] = useState(false);\n  const [viewDecrypted, setViewDecrypted] = useState(true);\n  const [deleteButtonLoading, setdeleteButtonLoading] = useState(false);\n\n  const [deleteClip] = useMutation(DELETE_CLIP, {\n    update(cache, { data }) {\n      const newClipFromResponse = data?.deleteClip.clip;\n      cache.evict({\n        id: \"ROOT_QUERY\",\n        fieldName: \"clip\",\n        id: newClipFromResponse.id,\n      });\n\n      //       const existingClips = cache.readQuery({\n      //         query: GET_MY_CLIPS,\n      //       });\n      //\n      //       if (existingClips && newClipFromResponse) {\n      //         var newClips = existingClips?.clips.filter(function (item) {\n      //           return item.id !== newClipFromResponse.id;\n      //         });\n      //\n      //         cache.writeQuery({\n      //           query: GET_MY_CLIPS,\n      //           data: {\n      //             clips: newClips,\n      //           },\n      //         });\n      //\n      //         refetch();\n      //       }\n      refetch();\n      message.success(\"Clip deleted!\");\n      setdeleteButtonLoading(false);\n    },\n  });\n  const [updateClip] = useMutation(UPDATE_CLIP, {\n    update(cache, { data }) {\n      // We use an update function here to write the\n      // new value of the GET_ALL_ClipS query.\n      const newClipFromResponse = data?.updateClip.clip;\n      const existingClips = cache.readQuery({\n        query: GET_MY_CLIPS,\n      });\n      if (existingClips && newClipFromResponse) {\n        var newClips = existingClips?.clips.filter(function (item) {\n          return item.id !== newClipFromResponse.id;\n        });\n\n        cache.writeQuery({\n          query: GET_MY_CLIPS,\n          data: {\n            clips: [...newClips, newClipFromResponse],\n          },\n        });\n        message.success(\"Clip updated!\");\n        refetch();\n        setsaveButtonLoading(false);\n        setEditable(false);\n      }\n      // setokButtonLoading(false);\n      // setmodalVisible(false);\n      // settextAreaValue(\"\");\n    },\n  });\n\n  const handleClick = (e) => {};\n  const copySuccess = () => {\n    message.success(\"Copied to Clipboard!\");\n  };\n\n  const copyError = () => {\n    message.error(\"Unable to Copy, Please check Clipboard permissions\");\n  };\n  const handleMouseOver = (e) => {\n    setViewDecrypted(true);\n    setDataToDisplay(decryptText(encryptedData));\n  };\n  const handleMouseOut = (e) => {\n    setViewDecrypted(false);\n    setDataToDisplay(encryptedData);\n  };\n  const onTextAreaValueChange = ({ target: { value } }) => {\n    setDataToDisplay(value);\n  };\n  const handleClipUpdate = () => {};\n  // setDataToDisplay(decryptText(encryptedData));\n  return (\n    // <Card\n    //   onClick={handleClick}\n    //   onMouseOver={handleMouseOver}\n    //   onMouseOut={handleMouseOut}\n    //   hoverable\n    //   bordered={false}\n    //   style={{ margin: \"0px\" }}\n    // >\n    <Card\n      onClick={handleClick}\n      hoverable\n      bordered={false}\n      style={{ margin: \"0px\" }}\n    >\n      {editable ? (\n        <TextArea\n          allowClear\n          value={dataToDisplay}\n          bordered={false}\n          autoSize={{ minRows: 1, maxRows: 15 }}\n          onChange={onTextAreaValueChange}\n        />\n      ) : (\n        // <TextArea  allowClear onChange={onChange} />\n        <Paragraph>{decryptText(data.data)}</Paragraph>\n      )}\n      <Button\n        type=\"primary\"\n        shape=\"circle\"\n        icon={<CopyOutlined />}\n        onClick={(e) => {\n          var result = copyTextToClipboard(\n            decryptText(encryptedData),\n            copySuccess,\n            copyError\n          );\n        }}\n      />\n      {editable ? (\n        <>\n          <Button\n            type=\"default\"\n            shape=\"circle\"\n            icon={<SaveOutlined />}\n            loading={saveButtonLoading}\n            onClick={(e) => {\n              setsaveButtonLoading(true);\n              updateClip({\n                variables: { id: id, data: encryptText(dataToDisplay) },\n              });\n              refetch();\n            }}\n          />\n          <Button\n            type=\"default\"\n            shape=\"circle\"\n            icon={<CloseOutlined />}\n            onClick={(e) => {\n              setDataToDisplay(decryptText(encryptedData));\n              setEditable(!editable);\n            }}\n          />\n        </>\n      ) : (\n        <Button\n          type=\"default\"\n          shape=\"circle\"\n          icon={<EditOutlined />}\n          onClick={(e) => {\n            setEditable(!editable);\n          }}\n        />\n      )}\n\n      <Popconfirm\n        title=\"Are you sure to delete this Clip?\"\n        onConfirm={(e) => {\n          setdeleteButtonLoading(true);\n          deleteClip({ variables: { id: id } });\n          refetch();\n        }}\n        onCancel={(e) => {\n          message.warning(\"Deletion aborted!\");\n        }}\n        okText=\"Yes\"\n        cancelText=\"No\"\n      >\n        <Button\n          type=\"danger\"\n          shape=\"circle\"\n          loading={deleteButtonLoading}\n          icon={<DeleteOutlined />}\n        />\n      </Popconfirm>\n    </Card>\n  );\n}\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ProfileModal.js",["123","124","125","126","127","128","129"],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/SettingsModal.js",["130","131"],"import { Modal, Button, Tooltip, Input } from \"antd\";\nimport { SettingOutlined } from \"@ant-design/icons\";\nimport React, { useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\n\nimport { AES } from \"crypto-js\";\n\nimport { CREATE_CLIP, GET_MY_CLIPS } from \"../GraphqlQueries\";\n\nexport default function SettingsModal(props) {\n  const { TextArea } = Input;\n  const [createClip, { data }] = useMutation(CREATE_CLIP, {\n    update(cache, { data }) {\n      // We use an update function here to write the\n      // new value of the GET_ALL_ClipS query.\n      const newClipFromResponse = data?.createClip.clip;\n      const existingClips = cache.readQuery({\n        query: GET_MY_CLIPS,\n      });\n      if (existingClips && newClipFromResponse) {\n        cache.writeQuery({\n          query: GET_MY_CLIPS,\n          data: {\n            clips: [...existingClips?.clips, newClipFromResponse],\n          },\n        });\n      }\n      // refetch();\n      setokButtonLoading(false);\n      setmodalVisible(false);\n      settextAreaValue(\"\");\n    },\n  });\n\n  const [textAreaValue, settextAreaValue] = useState(\"\");\n  const [modalVisible, setmodalVisible] = useState(false);\n  const [okButtonLoading, setokButtonLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const handleAddFromClipboard = () => {\n    navigator.clipboard\n      .readText()\n      .then((text) => {\n        settextAreaValue(text);\n      })\n      .catch((err) => {\n        console.log(err);\n        setError(true);\n      });\n  };\n\n  const showModal = () => {\n    setmodalVisible(true);\n  };\n  const encryptText = (text) => {\n    return AES.encrypt(text, \"SECRET_TOKEN\").toString();\n    // return text;\n  };\n\n  const handleOk = () => {\n    setokButtonLoading(true);\n    let oldList = data;\n    createClip({ variables: { data: encryptText(textAreaValue) } });\n  };\n\n  const handleCancel = () => {\n    setmodalVisible(false);\n  };\n  const onTextAreaValueChange = ({ target: { value } }) => {\n    settextAreaValue(value);\n  };\n\n  return (\n    <>\n      <Tooltip title=\"Settings\">\n        <Button\n          shape=\"circle\"\n          type=\"primary\"\n          onClick={showModal}\n          size=\"large\"\n          icon={<SettingOutlined />}\n        />\n      </Tooltip>\n      <Modal\n        visible={modalVisible}\n        title=\"Settings\"\n        onOk={handleOk}\n        onCancel={handleCancel}\n        footer={[\n          <Button key=\"back\" onClick={handleCancel}>\n            Cancel\n          </Button>,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            loading={okButtonLoading}\n            onClick={handleOk}\n          >\n            Add this Clip\n          </Button>,\n        ]}\n      >\n        {error ? (\n          <p>Some Error Occuerd</p>\n        ) : (\n          <>\n            <Button\n              key=\"back\"\n              type=\"dashed\"\n              block\n              onClick={handleAddFromClipboard}\n            >\n              Add From ClipBoard\n            </Button>\n            <TextArea\n              value={textAreaValue}\n              onChange={onTextAreaValueChange}\n              autoSize={{ minRows: 3, maxRows: 15 }}\n            />\n          </>\n        )}\n      </Modal>\n    </>\n  );\n}\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/LoginRedirect.js",[],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/Loading.js",[],{"ruleId":"132","severity":1,"message":"133","line":1,"column":17,"nodeType":"134","messageId":"135","endLine":1,"endColumn":25},{"ruleId":"132","severity":1,"message":"136","line":2,"column":7,"nodeType":"134","messageId":"135","endLine":2,"endColumn":11},{"ruleId":"132","severity":1,"message":"137","line":17,"column":9,"nodeType":"134","messageId":"135","endLine":17,"endColumn":12},{"ruleId":"132","severity":1,"message":"136","line":32,"column":7,"nodeType":"134","messageId":"135","endLine":32,"endColumn":11},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"132","severity":1,"message":"142","line":3,"column":27,"nodeType":"134","messageId":"135","endLine":3,"endColumn":36},{"ruleId":"132","severity":1,"message":"143","line":61,"column":9,"nodeType":"134","messageId":"135","endLine":61,"endColumn":16},{"ruleId":"132","severity":1,"message":"133","line":1,"column":17,"nodeType":"134","messageId":"135","endLine":1,"endColumn":25},{"ruleId":"132","severity":1,"message":"142","line":1,"column":27,"nodeType":"134","messageId":"135","endLine":1,"endColumn":36},{"ruleId":"132","severity":1,"message":"144","line":2,"column":16,"nodeType":"134","messageId":"135","endLine":2,"endColumn":22},{"ruleId":"132","severity":1,"message":"145","line":4,"column":3,"nodeType":"134","messageId":"135","endLine":4,"endColumn":15},{"ruleId":"132","severity":1,"message":"146","line":5,"column":3,"nodeType":"134","messageId":"135","endLine":5,"endColumn":20},{"ruleId":"132","severity":1,"message":"147","line":7,"column":3,"nodeType":"134","messageId":"135","endLine":7,"endColumn":18},{"ruleId":"132","severity":1,"message":"148","line":17,"column":8,"nodeType":"134","messageId":"135","endLine":17,"endColumn":20},{"ruleId":"132","severity":1,"message":"149","line":18,"column":9,"nodeType":"134","messageId":"135","endLine":18,"endColumn":16},{"ruleId":"132","severity":1,"message":"150","line":36,"column":13,"nodeType":"134","messageId":"135","endLine":36,"endColumn":20},{"ruleId":"132","severity":1,"message":"151","line":2,"column":10,"nodeType":"134","messageId":"135","endLine":2,"endColumn":15},{"ruleId":"132","severity":1,"message":"133","line":1,"column":17,"nodeType":"134","messageId":"135","endLine":1,"endColumn":25},{"ruleId":"132","severity":1,"message":"152","line":3,"column":10,"nodeType":"134","messageId":"135","endLine":3,"endColumn":18},{"ruleId":"132","severity":1,"message":"153","line":7,"column":10,"nodeType":"134","messageId":"135","endLine":7,"endColumn":22},{"ruleId":"132","severity":1,"message":"154","line":10,"column":10,"nodeType":"134","messageId":"135","endLine":10,"endColumn":22},{"ruleId":"132","severity":1,"message":"155","line":10,"column":24,"nodeType":"134","messageId":"135","endLine":10,"endColumn":38},{"ruleId":"132","severity":1,"message":"156","line":10,"column":40,"nodeType":"134","messageId":"135","endLine":10,"endColumn":53},{"ruleId":"132","severity":1,"message":"157","line":13,"column":11,"nodeType":"134","messageId":"135","endLine":13,"endColumn":17},{"ruleId":"132","severity":1,"message":"158","line":13,"column":19,"nodeType":"134","messageId":"135","endLine":13,"endColumn":26},{"ruleId":"132","severity":1,"message":"159","line":13,"column":28,"nodeType":"134","messageId":"135","endLine":13,"endColumn":34},{"ruleId":"132","severity":1,"message":"133","line":1,"column":17,"nodeType":"134","messageId":"135","endLine":1,"endColumn":25},{"ruleId":"132","severity":1,"message":"157","line":13,"column":11,"nodeType":"134","messageId":"135","endLine":13,"endColumn":17},{"ruleId":"132","severity":1,"message":"159","line":13,"column":28,"nodeType":"134","messageId":"135","endLine":13,"endColumn":34},{"ruleId":"132","severity":1,"message":"157","line":8,"column":11,"nodeType":"134","messageId":"135","endLine":8,"endColumn":17},{"ruleId":"132","severity":1,"message":"159","line":8,"column":28,"nodeType":"134","messageId":"135","endLine":8,"endColumn":34},{"ruleId":"132","severity":1,"message":"160","line":9,"column":7,"nodeType":"134","messageId":"135","endLine":9,"endColumn":15},{"ruleId":"132","severity":1,"message":"161","line":35,"column":10,"nodeType":"134","messageId":"135","endLine":35,"endColumn":23},{"ruleId":"162","severity":1,"message":"163","line":44,"column":9,"nodeType":"164","messageId":"165","endLine":44,"endColumn":11},{"ruleId":"132","severity":1,"message":"166","line":108,"column":9,"nodeType":"134","messageId":"135","endLine":108,"endColumn":24},{"ruleId":"132","severity":1,"message":"167","line":112,"column":9,"nodeType":"134","messageId":"135","endLine":112,"endColumn":23},{"ruleId":"132","severity":1,"message":"168","line":119,"column":9,"nodeType":"134","messageId":"135","endLine":119,"endColumn":25},{"ruleId":"132","severity":1,"message":"169","line":153,"column":15,"nodeType":"134","messageId":"135","endLine":153,"endColumn":21},{"ruleId":"132","severity":1,"message":"170","line":1,"column":34,"nodeType":"134","messageId":"135","endLine":1,"endColumn":39},{"ruleId":"132","severity":1,"message":"142","line":3,"column":27,"nodeType":"134","messageId":"135","endLine":3,"endColumn":36},{"ruleId":"132","severity":1,"message":"171","line":4,"column":10,"nodeType":"134","messageId":"135","endLine":4,"endColumn":21},{"ruleId":"132","severity":1,"message":"172","line":5,"column":10,"nodeType":"134","messageId":"135","endLine":5,"endColumn":20},{"ruleId":"132","severity":1,"message":"173","line":7,"column":10,"nodeType":"134","messageId":"135","endLine":7,"endColumn":13},{"ruleId":"132","severity":1,"message":"174","line":9,"column":10,"nodeType":"134","messageId":"135","endLine":9,"endColumn":21},{"ruleId":"132","severity":1,"message":"153","line":9,"column":23,"nodeType":"134","messageId":"135","endLine":9,"endColumn":35},{"ruleId":"132","severity":1,"message":"142","line":3,"column":27,"nodeType":"134","messageId":"135","endLine":3,"endColumn":36},{"ruleId":"132","severity":1,"message":"143","line":62,"column":9,"nodeType":"134","messageId":"135","endLine":62,"endColumn":16},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'done' is defined but never used.","'msg' is assigned a value but never used.","no-native-reassign",["175"],"no-negated-in-lhs",["176"],"'useEffect' is defined but never used.","'oldList' is assigned a value but never used.","'Switch' is defined but never used.","'UserOutlined' is defined but never used.","'PlusCircleTwoTone' is defined but never used.","'SettingOutlined' is defined but never used.","'ToggleButton' is defined but never used.","'SubMenu' is assigned a value but never used.","'current' is assigned a value but never used.","'Radio' is defined but never used.","'useQuery' is defined but never used.","'GET_MY_CLIPS' is defined but never used.","'ApolloClient' is defined but never used.","'createHttpLink' is defined but never used.","'InMemoryCache' is defined but never used.","'Header' is assigned a value but never used.","'Content' is assigned a value but never used.","'Footer' is assigned a value but never used.","'fakeAuth' is assigned a value but never used.","'viewDecrypted' is assigned a value but never used.","no-dupe-keys","Duplicate key 'id'.","ObjectExpression","unexpected","'handleMouseOver' is assigned a value but never used.","'handleMouseOut' is assigned a value but never used.","'handleClipUpdate' is assigned a value but never used.","'result' is assigned a value but never used.","'Input' is defined but never used.","'useMutation' is defined but never used.","'useHistory' is defined but never used.","'AES' is defined but never used.","'CREATE_CLIP' is defined but never used.","no-global-assign","no-unsafe-negation"]