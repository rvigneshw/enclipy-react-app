[{"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/CardList.js":"1","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/Utils/CopyClip.js":"2","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ClipBoardModal.js":"3","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/index.js":"4","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/GraphqlClient.js":"5","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/AppHeader.js":"6","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/reportWebVitals.js":"7","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/App.js":"8","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/Home.js":"9","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/Login.js":"10","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/AppRouter.js":"11","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/GraphqlQueries.js":"12","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ClipCard.js":"13","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ProfileModal.js":"14","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/SettingsModal.js":"15","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/LoginRedirect.js":"16","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/Loading.js":"17"},{"size":937,"mtime":1607778973890,"results":"18","hashOfConfig":"19"},{"size":1116,"mtime":1607778667460,"results":"20","hashOfConfig":"19"},{"size":3095,"mtime":1607779041740,"results":"21","hashOfConfig":"19"},{"size":437,"mtime":1607778844060,"results":"22","hashOfConfig":"19"},{"size":573,"mtime":1607777276600,"results":"23","hashOfConfig":"19"},{"size":3955,"mtime":1607778935570,"results":"24","hashOfConfig":"19"},{"size":362,"mtime":1606630090938,"results":"25","hashOfConfig":"19"},{"size":649,"mtime":1607778579280,"results":"26","hashOfConfig":"19"},{"size":1101,"mtime":1607778766520,"results":"27","hashOfConfig":"19"},{"size":3729,"mtime":1607778781170,"results":"28","hashOfConfig":"19"},{"size":840,"mtime":1607778608880,"results":"29","hashOfConfig":"19"},{"size":751,"mtime":1607409236080,"results":"30","hashOfConfig":"19"},{"size":6329,"mtime":1607785471780,"results":"31","hashOfConfig":"19"},{"size":2423,"mtime":1607779114700,"results":"32","hashOfConfig":"19"},{"size":2132,"mtime":1607784875570,"results":"33","hashOfConfig":"19"},{"size":1875,"mtime":1607778742210,"results":"34","hashOfConfig":"19"},{"size":3324,"mtime":1607610719600,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1fixph7",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/CardList.js",[],["73","74"],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/Utils/CopyClip.js",[],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ClipBoardModal.js",[],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/index.js",[],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/GraphqlClient.js",[],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/AppHeader.js",[],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/reportWebVitals.js",[],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/App.js",[],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/Home.js",[],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/Login.js",[],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/AppRouter.js",[],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/GraphqlQueries.js",[],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ClipCard.js",["75","76","77","78"],"import React, { useState } from \"react\";\nimport { Card, Typography, Input, Button, message, Popconfirm } from \"antd\";\nimport { Row, Col } from \"antd\";\nimport {\n  EditOutlined,\n  DeleteOutlined,\n  CopyOutlined,\n  CloseOutlined,\n  SaveOutlined,\n} from \"@ant-design/icons\";\nimport { AES, enc } from \"crypto-js\";\nimport { useMutation } from \"@apollo/client\";\nimport { DELETE_CLIP, GET_MY_CLIPS, UPDATE_CLIP } from \"../GraphqlQueries\";\nimport { copyTextToClipboard } from \"../Utils/CopyClip\";\n\nconst decryptText = (text) => {\n  var bytes = AES.decrypt(text, \"SECRET_TOKEN\");\n  var originalText = bytes.toString(enc.Utf8);\n  return originalText;\n  // return text;\n};\nconst encryptText = (text) => {\n  return AES.encrypt(text, \"SECRET_TOKEN\").toString();\n};\n\nexport function ClipCard({ data, refetch }) {\n  const viewMode = localStorage.getItem(\"view\");\n  const { Paragraph, Text } = Typography;\n  const { TextArea } = Input;\n  const id = data.id;\n  const encryptedData = data.data;\n  const updated_date = new Date(data.updated_at);\n  const updated_at = `${updated_date.toDateString()} at ${updated_date.toLocaleTimeString(\n    \"en-US\"\n  )}`;\n  const [dataToDisplay, setDataToDisplay] = useState(encryptedData);\n  const [editable, setEditable] = useState(false);\n  const [saveButtonLoading, setsaveButtonLoading] = useState(false);\n  const [viewDecrypted, setViewDecrypted] = useState(true);\n  const [deleteButtonLoading, setdeleteButtonLoading] = useState(false);\n\n  const [deleteClip] = useMutation(DELETE_CLIP, {\n    update(cache, { data }) {\n      const newClipFromResponse = data?.deleteClip.clip;\n      cache.evict({\n        id: \"ROOT_QUERY\",\n        fieldName: \"clip\",\n        id: newClipFromResponse.id,\n      });\n      refetch();\n      message.success(\"Clip deleted!\");\n      setdeleteButtonLoading(false);\n    },\n  });\n  const [updateClip] = useMutation(UPDATE_CLIP, {\n    update(cache, { data }) {\n      const newClipFromResponse = data?.updateClip.clip;\n      const existingClips = cache.readQuery({\n        query: GET_MY_CLIPS,\n      });\n      if (existingClips && newClipFromResponse) {\n        var newClips = existingClips?.clips.filter(function (item) {\n          return item.id !== newClipFromResponse.id;\n        });\n\n        cache.writeQuery({\n          query: GET_MY_CLIPS,\n          data: {\n            clips: [...newClips, newClipFromResponse],\n          },\n        });\n        message.success(\"Clip updated!\");\n        refetch();\n        setsaveButtonLoading(false);\n        setEditable(false);\n      }\n    },\n  });\n\n  const handleClick = (e) => {};\n  const copySuccess = () => {\n    message.success(\"Copied to Clipboard!\");\n  };\n\n  const copyError = () => {\n    message.error(\"Unable to Copy, Please check Clipboard permissions\");\n  };\n  const handleMouseOver = (e) => {\n    if (!editable) {\n      setViewDecrypted(true);\n      setDataToDisplay(decryptText(encryptedData));\n    }\n  };\n  const handleMouseOut = (e) => {\n    if (!editable) {\n      setViewDecrypted(false);\n      setDataToDisplay(encryptedData);\n    }\n  };\n  const onTextAreaValueChange = ({ target: { value } }) => {\n    setDataToDisplay(value);\n  };\n  const handleClipUpdate = () => {};\n  // setDataToDisplay(decryptText(encryptedData));\n  return (\n    <Card\n      onClick={handleClick}\n      onMouseOver={handleMouseOver}\n      onMouseOut={handleMouseOut}\n      hoverable\n      bordered={false}\n      style={{ margin: \"0px\" }}\n    >\n      {/* <Card */}\n      {/*   onClick={handleClick} */}\n      {/*   hoverable */}\n      {/*   bordered={false} */}\n      {/*   style={{ margin: \"0px\" }} */}\n      {/* > */}\n      {editable ? (\n        <TextArea\n          allowClear\n          value={dataToDisplay}\n          bordered={false}\n          autoSize={{ minRows: 1, maxRows: 15 }}\n          onChange={onTextAreaValueChange}\n        />\n      ) : (\n        // <TextArea  allowClear onChange={onChange} />\n        <Paragraph>\n          {viewMode === \"viewDecrypt\" ? decryptText(data.data) : dataToDisplay}\n        </Paragraph>\n      )}\n\n      <Row justify=\"center\">\n        <Col>\n          <Button\n            type=\"primary\"\n            shape=\"circle\"\n            icon={<CopyOutlined />}\n            onClick={(e) => {\n              var result = copyTextToClipboard(\n                decryptText(encryptedData),\n                copySuccess,\n                copyError\n              );\n            }}\n          />\n        </Col>\n\n        {editable ? (\n          <>\n            <Col>\n              <Button\n                type=\"default\"\n                shape=\"circle\"\n                icon={<SaveOutlined />}\n                loading={saveButtonLoading}\n                onClick={(e) => {\n                  setsaveButtonLoading(true);\n                  updateClip({\n                    variables: { id: id, data: encryptText(dataToDisplay) },\n                  });\n                  refetch();\n                }}\n              />\n            </Col>\n            <Col>\n              <Button\n                type=\"default\"\n                shape=\"circle\"\n                icon={<CloseOutlined />}\n                onClick={(e) => {\n                  setDataToDisplay(decryptText(encryptedData));\n                  setEditable(!editable);\n                }}\n              />\n            </Col>\n          </>\n        ) : (\n          <Col>\n            <Button\n              type=\"default\"\n              shape=\"circle\"\n              icon={<EditOutlined />}\n              onClick={(e) => {\n                setEditable(!editable);\n              }}\n            />\n          </Col>\n        )}\n\n        <Col span={4}>\n          <Popconfirm\n            title=\"Are you sure to delete this Clip?\"\n            onConfirm={(e) => {\n              setdeleteButtonLoading(true);\n              deleteClip({ variables: { id: id } });\n              refetch();\n            }}\n            onCancel={(e) => {\n              message.warning(\"Deletion aborted!\");\n            }}\n            okText=\"Yes\"\n            cancelText=\"No\"\n          >\n            <Button\n              type=\"danger\"\n              shape=\"circle\"\n              loading={deleteButtonLoading}\n              icon={<DeleteOutlined />}\n            />\n          </Popconfirm>\n        </Col>\n      </Row>\n      <Text type=\"secondary\" style={{ fontSize: 10 }}>\n        Last Updated: {updated_at}\n      </Text>\n    </Card>\n  );\n}\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ProfileModal.js",[],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/SettingsModal.js",["79","80","81"],"import { Modal, Button, Tooltip, Input, Typography, Radio, Select } from \"antd\";\nimport { SettingOutlined } from \"@ant-design/icons\";\nimport React, { useState } from \"react\";\n\nimport { AES } from \"crypto-js\";\n\nexport default function SettingsModal(props) {\n  const { Option } = Select;\n  const { Text } = Typography;\n  const [modalVisible, setmodalVisible] = useState(false);\n  const [visibilityMode, setvisibilityMode] = useState(\n    localStorage.getItem(\"view\")\n  );\n\n  const showModal = () => {\n    setmodalVisible(true);\n  };\n  const encryptText = (text) => {\n    return AES.encrypt(text, \"SECRET_TOKEN\").toString();\n  };\n\n  const handleOk = () => {\n    localStorage.setItem(\"view\", visibilityMode);\n    window.location.href = \"/\";\n  };\n\n  const handleCancel = () => {\n    setmodalVisible(false);\n  };\n\n  return (\n    <>\n      <Tooltip title=\"Settings\">\n        <Button\n          shape=\"circle\"\n          type=\"primary\"\n          onClick={showModal}\n          size=\"large\"\n          icon={<SettingOutlined />}\n        />\n      </Tooltip>\n      <Modal\n        visible={modalVisible}\n        title=\"Settings\"\n        onCancel={handleCancel}\n        footer={[\n          <Button key=\"back\" onClick={handleCancel}>\n            Cancel\n          </Button>,\n          <Button key=\"submit\" type=\"primary\" onClick={handleOk}>\n            Save This Settings and Refresh Page\n          </Button>,\n        ]}\n      >\n        How do you want to view clip cards?\n        <br></br>\n        <Select\n          defaultValue=\"viewDecrypt\"\n          value={visibilityMode}\n          style={{ width: 250 }}\n          onChange={(e) => {\n            setvisibilityMode(e);\n          }}\n        >\n          <Option value=\"viewDecrypt\">View Decrypted</Option>\n          <Option value=\"hoverDecrypt\">Decrypted view only on hover</Option>\n        </Select>\n        <br></br>\n        <Text type=\"secondary\">\n          These settings are local to this device only.\n        </Text>\n        <br></br>\n        <Text type=\"secondary\">\n          You may need to refresh the page in order for settings to take effect.\n        </Text>\n      </Modal>\n    </>\n  );\n}\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/LoginRedirect.js",[],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/Loading.js",[],{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":39,"column":10,"nodeType":"88","messageId":"89","endLine":39,"endColumn":23},{"ruleId":"90","severity":1,"message":"91","line":48,"column":9,"nodeType":"92","messageId":"93","endLine":48,"endColumn":11},{"ruleId":"86","severity":1,"message":"94","line":104,"column":9,"nodeType":"88","messageId":"89","endLine":104,"endColumn":25},{"ruleId":"86","severity":1,"message":"95","line":143,"column":19,"nodeType":"88","messageId":"89","endLine":143,"endColumn":25},{"ruleId":"86","severity":1,"message":"96","line":1,"column":34,"nodeType":"88","messageId":"89","endLine":1,"endColumn":39},{"ruleId":"86","severity":1,"message":"97","line":1,"column":53,"nodeType":"88","messageId":"89","endLine":1,"endColumn":58},{"ruleId":"86","severity":1,"message":"98","line":18,"column":9,"nodeType":"88","messageId":"89","endLine":18,"endColumn":20},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"no-unused-vars","'viewDecrypted' is assigned a value but never used.","Identifier","unusedVar","no-dupe-keys","Duplicate key 'id'.","ObjectExpression","unexpected","'handleClipUpdate' is assigned a value but never used.","'result' is assigned a value but never used.","'Input' is defined but never used.","'Radio' is defined but never used.","'encryptText' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]