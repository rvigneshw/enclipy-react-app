[{"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/CardList.js":"1","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/Utils/CopyClip.js":"2","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ClipBoardModal.js":"3"},{"size":3853,"mtime":1606994744250,"results":"4","hashOfConfig":"5"},{"size":1172,"mtime":1606993726450,"results":"6","hashOfConfig":"5"},{"size":3071,"mtime":1606995129650,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"aay21l",{"filePath":"11","messages":"12","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/CardList.js",["15","16","17","18","19"],"import React, { useState } from \"react\";\nimport {\n  Card,\n  List,\n  Typography,\n  Input,\n  Button,\n  message,\n  Popconfirm,\n} from \"antd\";\nimport { Row, Col } from \"antd\";\nimport { EditOutlined, DeleteOutlined, CopyOutlined } from \"@ant-design/icons\";\nimport { AES, enc } from \"crypto-js\";\nimport { useMutation } from \"@apollo/client\";\nimport { DELETE_CLIP, GET_MY_CLIPS } from \"../GraphqlQueries\";\nimport { copyTextToClipboard } from \"../Utils/CopyClip\";\n\nconst gridConfig = {\n  gutter: 16,\n  xs: 1,\n  sm: 2,\n  md: 4,\n  lg: 4,\n  xl: 5,\n  xxl: 6,\n};\n\nconst ClipCard = (props) => {\n  const { Paragraph } = Typography;\n  const { TextArea } = Input;\n  const id = props.data.id;\n  const encryptedData = props.data.data;\n  const [dataToDisplay, setDataToDisplay] = useState(encryptedData);\n  const [editable, setEditable] = useState(true);\n  const [viewDecrypted, setViewDecrypted] = useState(false);\n  const [deleteButtonLoading, setdeleteButtonLoading] = useState(false);\n\n  const [deleteClip, { data }] = useMutation(DELETE_CLIP, {\n    update(cache, { data }) {\n      const newClipFromResponse = data?.deleteClip.clip;\n      cache.evict({ id: newClipFromResponse.id });\n\n      const existingClips = cache.readQuery({\n        query: GET_MY_CLIPS,\n      });\n\n      if (existingClips && newClipFromResponse) {\n        var newClips = existingClips?.clips.filter(function (item) {\n          return item.id !== newClipFromResponse.id;\n        });\n\n        cache.writeQuery({\n          query: GET_MY_CLIPS,\n          data: {\n            clips: newClips,\n          },\n        });\n      }\n      message.success(\"Clip deleted!\");\n      setdeleteButtonLoading(false);\n    },\n  });\n\n  const handleClick = (e) => {};\n  const copySuccess = () => {\n    message.success(\"Copied to Clipboard!\");\n  };\n\n  const copyError = () => {\n    message.error(\"Unable to Copy, Please check Clipboard permissions\");\n  };\n  const handleMouseOver = (e) => {\n    setViewDecrypted(true);\n    setDataToDisplay(decryptText(encryptedData));\n  };\n  const handleMouseOut = (e) => {\n    setViewDecrypted(false);\n    setDataToDisplay(encryptedData);\n  };\n  const decryptText = (text) => {\n    var bytes = AES.decrypt(text, \"SECRET_TOKEN\");\n    var originalText = bytes.toString(enc.Utf8);\n    return originalText;\n  };\n\n  return (\n    <Card\n      onClick={handleClick}\n      onMouseOver={handleMouseOver}\n      onMouseOut={handleMouseOut}\n      hoverable\n      bordered={false}\n      style={{ margin: \"0px\" }}\n    >\n      {editable ? (\n        <Paragraph>{dataToDisplay}</Paragraph>\n      ) : (\n        <TextArea></TextArea>\n      )}\n      <Button\n        type=\"primary\"\n        shape=\"circle\"\n        icon={<CopyOutlined />}\n        onClick={(e) => {\n          var result = copyTextToClipboard(\n            decryptText(encryptedData),\n            copySuccess,\n            copyError\n          );\n        }}\n      />\n      <Button\n        type=\"default\"\n        shape=\"circle\"\n        icon={<EditOutlined />}\n        onClick={(e) => {\n          setEditable(!editable);\n        }}\n      />\n      <Popconfirm\n        title=\"Are you sure to delete this Clip?\"\n        onConfirm={(e) => {\n          setdeleteButtonLoading(true);\n          deleteClip({ variables: { id: id } });\n        }}\n        onCancel={(e) => {\n          message.warning(\"Deletion aborted!\");\n        }}\n        okText=\"Yes\"\n        cancelText=\"No\"\n      >\n        <Button\n          type=\"danger\"\n          shape=\"circle\"\n          loading={deleteButtonLoading}\n          icon={<DeleteOutlined />}\n        />\n      </Popconfirm>\n      ,\n    </Card>\n  );\n};\nexport default function CardList(props) {\n  return (\n    <List\n      grid={gridConfig}\n      dataSource={props.data}\n      renderItem={(item) => (\n        <List.Item style={{ padding: \"0px\" }}>\n          <ClipCard data={item} />\n        </List.Item>\n      )}\n    />\n  );\n}\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/Utils/CopyClip.js",["20","21"],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ClipBoardModal.js",["22","23"],{"ruleId":"24","severity":1,"message":"25","line":11,"column":10,"nodeType":"26","messageId":"27","endLine":11,"endColumn":13},{"ruleId":"24","severity":1,"message":"28","line":11,"column":15,"nodeType":"26","messageId":"27","endLine":11,"endColumn":18},{"ruleId":"24","severity":1,"message":"29","line":35,"column":10,"nodeType":"26","messageId":"27","endLine":35,"endColumn":23},{"ruleId":"24","severity":1,"message":"30","line":38,"column":24,"nodeType":"26","messageId":"27","endLine":38,"endColumn":28},{"ruleId":"24","severity":1,"message":"31","line":105,"column":15,"nodeType":"26","messageId":"27","endLine":105,"endColumn":21},{"ruleId":"24","severity":1,"message":"32","line":2,"column":7,"nodeType":"26","messageId":"27","endLine":2,"endColumn":11},{"ruleId":"24","severity":1,"message":"32","line":32,"column":7,"nodeType":"26","messageId":"27","endLine":32,"endColumn":11},{"ruleId":"24","severity":1,"message":"33","line":3,"column":27,"nodeType":"26","messageId":"27","endLine":3,"endColumn":36},{"ruleId":"24","severity":1,"message":"34","line":59,"column":9,"nodeType":"26","messageId":"27","endLine":59,"endColumn":16},"no-unused-vars","'Row' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.","'viewDecrypted' is assigned a value but never used.","'data' is assigned a value but never used.","'result' is assigned a value but never used.","'done' is defined but never used.","'useEffect' is defined but never used.","'oldList' is assigned a value but never used."]