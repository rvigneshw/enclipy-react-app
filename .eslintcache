[{"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/CardList.js":"1","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/Utils/CopyClip.js":"2","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ClipBoardModal.js":"3","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/index.js":"4","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/GraphqlClient.js":"5","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/AppHeader.js":"6","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/reportWebVitals.js":"7","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ToggleButton.js":"8","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/App.js":"9","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/Home.js":"10","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/Login.js":"11","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/AppRouter.js":"12","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/GraphqlQueries.js":"13","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ClipCard.js":"14","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ProfileModal.js":"15","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/SettingsModal.js":"16"},{"size":739,"mtime":1607423597251,"results":"17","hashOfConfig":"18"},{"size":1198,"mtime":1607427374901,"results":"19","hashOfConfig":"18"},{"size":3567,"mtime":1607426850771,"results":"20","hashOfConfig":"18"},{"size":1194,"mtime":1607405539130,"results":"21","hashOfConfig":"18"},{"size":805,"mtime":1607406176860,"results":"22","hashOfConfig":"18"},{"size":2117,"mtime":1607495168140,"results":"23","hashOfConfig":"18"},{"size":362,"mtime":1606630090938,"results":"24","hashOfConfig":"18"},{"size":489,"mtime":1607405981880,"results":"25","hashOfConfig":"18"},{"size":1109,"mtime":1607423281981,"results":"26","hashOfConfig":"18"},{"size":160,"mtime":1607423309571,"results":"27","hashOfConfig":"18"},{"size":107,"mtime":1606642426630,"results":"28","hashOfConfig":"18"},{"size":731,"mtime":1607423296431,"results":"29","hashOfConfig":"18"},{"size":751,"mtime":1607409236080,"results":"30","hashOfConfig":"18"},{"size":6148,"mtime":1607493076030,"results":"31","hashOfConfig":"18"},{"size":3557,"mtime":1607495248080,"results":"32","hashOfConfig":"18"},{"size":3230,"mtime":1607495270780,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},"1fixph7",{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"37"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"37"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"37"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"37"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"37"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"37"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"37"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/CardList.js",["75"],"import React, { useState } from \"react\";\nimport { List } from \"antd\";\nimport { ClipCard } from \"./ClipCard\";\nimport { useQuery } from \"@apollo/client\";\nimport { GET_MY_CLIPS } from \"../GraphqlQueries\";\n\nconst gridConfig = {\n  gutter: 16,\n  xs: 1,\n  sm: 2,\n  md: 4,\n  lg: 4,\n  xl: 5,\n  xxl: 6,\n};\n\nexport default function CardList(props) {\n  const { loading, error, data, refetch } = useQuery(GET_MY_CLIPS);\n  if (loading) return \"Loading...\";\n  if (error) return `Error! ${error.message}`;\n  return (\n    <List\n      grid={gridConfig}\n      dataSource={data.clips}\n      renderItem={(item) => (\n        <List.Item style={{ padding: \"0px\" }}>\n          <ClipCard data={item} refetch={refetch} />\n        </List.Item>\n      )}\n    />\n  );\n}\n",["76","77"],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/Utils/CopyClip.js",["78","79","80"],"const fallbackCopyTextToClipboard = (text, success, error) => {\n  let done;\n  var textArea = document.createElement(\"textarea\");\n  textArea.value = text;\n\n  // Avoid scrolling to bottom\n  textArea.style.top = \"0\";\n  textArea.style.left = \"0\";\n  textArea.style.position = \"fixed\";\n\n  document.body.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    var successful = document.execCommand(\"copy\");\n    var msg = successful ? \"successful\" : \"unsuccessful\";\n    // console.log(\"Fallback: Copying text command was \" + msg);\n    if (successful) {\n      success();\n    } else {\n      error();\n    }\n  } catch (err) {\n    error();\n    // console.error(\"Fallback: Oops, unable to copy\", err);\n  }\n\n  document.body.removeChild(textArea);\n};\nexport const copyTextToClipboard = (text, success, error) => {\n  let done;\n  if (!navigator.clipboard) {\n    fallbackCopyTextToClipboard(text, success, error);\n    return;\n  }\n  navigator.clipboard.writeText(text).then(\n    function () {\n      success();\n      // console.log(\"Async: Copying to clipboard was successful!\");\n    },\n    function (err) {\n      error();\n      // console.error(\"Async: Could not copy text: \", err);\n    }\n  );\n};\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ClipBoardModal.js",["81","82"],"import { Modal, Button, Tooltip, Input } from \"antd\";\nimport { PlusCircleOutlined } from \"@ant-design/icons\";\nimport React, { useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\n\nimport { AES } from \"crypto-js\";\n\nimport { CREATE_CLIP, GET_MY_CLIPS } from \"../GraphqlQueries\";\n\nexport default function ClipBoardModal(props) {\n  //   const [addClip] = useOfflineMutation(CREATE_CLIP);\n  //\n  //   async function handleSubmit() {\n  //     try {\n  //       await addClip({ variables: { data: encryptText(textAreaValue) } });\n  //     } catch (error) {\n  //       if (error.offline) {\n  //         error.watchOfflineChange();\n  //       }\n  //     }\n  //   }\n\n  const { TextArea } = Input;\n  const [createClip, { data }] = useMutation(CREATE_CLIP, {\n    update(cache, { data }) {\n      // We use an update function here to write the\n      // new value of the GET_ALL_ClipS query.\n      const newClipFromResponse = data?.createClip.clip;\n      const existingClips = cache.readQuery({\n        query: GET_MY_CLIPS,\n      });\n      if (existingClips && newClipFromResponse) {\n        cache.writeQuery({\n          query: GET_MY_CLIPS,\n          data: {\n            clips: [...existingClips?.clips, newClipFromResponse],\n          },\n        });\n      }\n      // refetch();\n      setokButtonLoading(false);\n      setmodalVisible(false);\n      settextAreaValue(\"\");\n    },\n  });\n\n  const [textAreaValue, settextAreaValue] = useState(\"\");\n  const [modalVisible, setmodalVisible] = useState(false);\n  const [okButtonLoading, setokButtonLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const handleAddFromClipboard = () => {\n    navigator.clipboard\n      .readText()\n      .then((text) => {\n        settextAreaValue(text);\n      })\n      .catch((err) => {\n        console.log(err);\n        setError(true);\n      });\n  };\n\n  const showModal = () => {\n    setmodalVisible(true);\n  };\n  const encryptText = (text) => {\n    return AES.encrypt(text, \"SECRET_TOKEN\").toString();\n    // return text;\n  };\n\n  const handleOk = () => {\n    setokButtonLoading(true);\n    let oldList = data;\n    createClip({ variables: { data: encryptText(textAreaValue) } });\n  };\n\n  const handleCancel = () => {\n    setmodalVisible(false);\n  };\n  const onTextAreaValueChange = ({ target: { value } }) => {\n    settextAreaValue(value);\n  };\n\n  return (\n    <>\n      <Tooltip title=\"Add Clip\">\n        <Button\n          shape=\"circle\"\n          type=\"primary\"\n          onClick={showModal}\n          size=\"large\"\n          icon={<PlusCircleOutlined />}\n        />\n      </Tooltip>\n      <Modal\n        visible={modalVisible}\n        title=\"Add Clip\"\n        onOk={handleOk}\n        onCancel={handleCancel}\n        footer={[\n          <Button key=\"back\" onClick={handleCancel}>\n            Cancel\n          </Button>,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            loading={okButtonLoading}\n            onClick={handleOk}\n          >\n            Add this Clip\n          </Button>,\n        ]}\n      >\n        {error ? (\n          <p>Some Error Occuerd</p>\n        ) : (\n          <>\n            <Button\n              key=\"back\"\n              type=\"dashed\"\n              block\n              onClick={handleAddFromClipboard}\n            >\n              Add From ClipBoard\n            </Button>\n            <TextArea\n              value={textAreaValue}\n              onChange={onTextAreaValueChange}\n              autoSize={{ minRows: 3, maxRows: 15 }}\n            />\n          </>\n        )}\n      </Modal>\n    </>\n  );\n}\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/index.js",["83","84"],"import React, { useState, useEffect } from \"react\";\nimport { render } from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { ApolloProvider } from \"@apollo/client\";\nimport { client } from \"./GraphqlClient\";\n\nconst Root = () => {\n  //   const [initialized, setInitialized] = useState(false);\n  //\n  //   // initialize the offix client and set the apollo client\n  //   useEffect(() => {\n  //     client.init().then(() => setInitialized(true));\n  //   }, []);\n  //\n  //   if (initialized) {\n  //     return (\n  //       <ApolloOfflineProvider client={client}>\n  //         <ApolloProvider client={client}>\n  //           <App />\n  //         </ApolloProvider>\n  //       </ApolloOfflineProvider>\n  //     );\n  //   }\n  //   return <h2>Loading...</h2>;\n  return (\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  );\n};\n\nrender(<Root />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/GraphqlClient.js",[],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/AppHeader.js",["85","86","87","88","89","90","91"],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/reportWebVitals.js",[],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ToggleButton.js",["92"],"import React from \"react\";\nimport { Radio, Button } from \"antd\";\n\nexport default class ToggleButton extends React.Component {\n  state = {\n    darkMode: false,\n  };\n\n  changeTheme = () => {\n    this.setState({\n      darkMode: !this.state.darkMode,\n    });\n  };\n\n  render() {\n    return (\n      <Button\n        type=\"primary\"\n        onClick={this.changeTheme}\n        style={{ marginTop: 16 }}\n      >\n        {this.state.darkMode ? \"Light Mode\" : \"Dark Mode\"}\n      </Button>\n    );\n  }\n}\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/App.js",["93","94","95","96","97","98","99","100"],"import React, { useState } from \"react\";\nimport { Layout } from \"antd\";\nimport { useQuery } from \"@apollo/client\";\n\nimport AppRouter from \"./AppRouter\";\nimport AppHeader from \"./components/AppHeader\";\nimport { GET_MY_CLIPS } from \"./GraphqlQueries\";\nimport \"./App.css\";\n\nimport { ApolloClient, createHttpLink, InMemoryCache } from \"@apollo/client\";\nconst App = () => {\n  const { Header, Content, Footer } = Layout;\n\n  return (\n    <div className=\"App\">\n      <Layout className=\"layout\" style={{ background: \"#FFF\" }}>\n        <AppHeader />\n        <Content\n          style={{\n            padding: \"0 10px\",\n            marginTop: 20,\n            height: \"100%\",\n          }}\n        >\n          <AppRouter />\n        </Content>\n        {/* <Footer */}\n        {/*   style={{ */}\n        {/*     position: \"sticky\", */}\n        {/*     bottom: \"0\", */}\n        {/*     height: \"50px\", */}\n        {/*     padding: \"0px\", */}\n        {/*     background: \"#FFFFFF00\", */}\n        {/*   }} */}\n        {/* > */}\n        {/*    */}\n        {/* </Footer> */}\n      </Layout>\n    </div>\n  );\n};\n\nexport default App;\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/Home.js",["101"],"import React, { useState } from \"react\";\n\nimport CardList from \"../components/CardList\";\n\nfunction Home(props) {\n  return <CardList />;\n}\n\nexport default Home;\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/views/Login.js",[],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/AppRouter.js",[],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/GraphqlQueries.js",[],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ClipCard.js",["102","103","104","105","106","107"],"import React, { useState } from \"react\";\nimport { Card, Typography, Input, Button, message, Popconfirm } from \"antd\";\nimport {\n  EditOutlined,\n  DeleteOutlined,\n  CopyOutlined,\n  CloseOutlined,\n  SaveOutlined,\n} from \"@ant-design/icons\";\nimport { AES, enc } from \"crypto-js\";\nimport { useMutation } from \"@apollo/client\";\nimport { DELETE_CLIP, GET_MY_CLIPS, UPDATE_CLIP } from \"../GraphqlQueries\";\nimport { copyTextToClipboard } from \"../Utils/CopyClip\";\n\nconst decryptText = (text) => {\n  var bytes = AES.decrypt(text, \"SECRET_TOKEN\");\n  var originalText = bytes.toString(enc.Utf8);\n  return originalText;\n  // return text;\n};\nconst encryptText = (text) => {\n  return AES.encrypt(text, \"SECRET_TOKEN\").toString();\n};\n\nexport function ClipCard({ data, refetch }) {\n  const { Paragraph } = Typography;\n  const { TextArea } = Input;\n  const id = data.id;\n  const encryptedData = data.data;\n  const [dataToDisplay, setDataToDisplay] = useState(\n    decryptText(encryptedData)\n  );\n  const [editable, setEditable] = useState(false);\n  const [saveButtonLoading, setsaveButtonLoading] = useState(false);\n  const [viewDecrypted, setViewDecrypted] = useState(true);\n  const [deleteButtonLoading, setdeleteButtonLoading] = useState(false);\n\n  const [deleteClip] = useMutation(DELETE_CLIP, {\n    update(cache, { data }) {\n      const newClipFromResponse = data?.deleteClip.clip;\n      cache.evict({\n        id: \"ROOT_QUERY\",\n        fieldName: \"clip\",\n        id: newClipFromResponse.id,\n      });\n\n      //       const existingClips = cache.readQuery({\n      //         query: GET_MY_CLIPS,\n      //       });\n      //\n      //       if (existingClips && newClipFromResponse) {\n      //         var newClips = existingClips?.clips.filter(function (item) {\n      //           return item.id !== newClipFromResponse.id;\n      //         });\n      //\n      //         cache.writeQuery({\n      //           query: GET_MY_CLIPS,\n      //           data: {\n      //             clips: newClips,\n      //           },\n      //         });\n      //\n      //         refetch();\n      //       }\n      refetch();\n      message.success(\"Clip deleted!\");\n      setdeleteButtonLoading(false);\n    },\n  });\n  const [updateClip] = useMutation(UPDATE_CLIP, {\n    update(cache, { data }) {\n      // We use an update function here to write the\n      // new value of the GET_ALL_ClipS query.\n      const newClipFromResponse = data?.updateClip.clip;\n      const existingClips = cache.readQuery({\n        query: GET_MY_CLIPS,\n      });\n      if (existingClips && newClipFromResponse) {\n        var newClips = existingClips?.clips.filter(function (item) {\n          return item.id !== newClipFromResponse.id;\n        });\n\n        cache.writeQuery({\n          query: GET_MY_CLIPS,\n          data: {\n            clips: [...newClips, newClipFromResponse],\n          },\n        });\n        message.success(\"Clip updated!\");\n        refetch();\n        setsaveButtonLoading(false);\n        setEditable(false);\n      }\n      // setokButtonLoading(false);\n      // setmodalVisible(false);\n      // settextAreaValue(\"\");\n    },\n  });\n\n  const handleClick = (e) => {};\n  const copySuccess = () => {\n    message.success(\"Copied to Clipboard!\");\n  };\n\n  const copyError = () => {\n    message.error(\"Unable to Copy, Please check Clipboard permissions\");\n  };\n  const handleMouseOver = (e) => {\n    setViewDecrypted(true);\n    setDataToDisplay(decryptText(encryptedData));\n  };\n  const handleMouseOut = (e) => {\n    setViewDecrypted(false);\n    setDataToDisplay(encryptedData);\n  };\n  const onTextAreaValueChange = ({ target: { value } }) => {\n    setDataToDisplay(value);\n  };\n  const handleClipUpdate = () => {};\n  // setDataToDisplay(decryptText(encryptedData));\n  return (\n    // <Card\n    //   onClick={handleClick}\n    //   onMouseOver={handleMouseOver}\n    //   onMouseOut={handleMouseOut}\n    //   hoverable\n    //   bordered={false}\n    //   style={{ margin: \"0px\" }}\n    // >\n    <Card\n      onClick={handleClick}\n      hoverable\n      bordered={false}\n      style={{ margin: \"0px\" }}\n    >\n      {editable ? (\n        <TextArea\n          allowClear\n          value={dataToDisplay}\n          bordered={false}\n          autoSize={{ minRows: 1, maxRows: 15 }}\n          onChange={onTextAreaValueChange}\n        />\n      ) : (\n        // <TextArea  allowClear onChange={onChange} />\n        <Paragraph>{decryptText(data.data)}</Paragraph>\n      )}\n      <Button\n        type=\"primary\"\n        shape=\"circle\"\n        icon={<CopyOutlined />}\n        onClick={(e) => {\n          var result = copyTextToClipboard(\n            decryptText(encryptedData),\n            copySuccess,\n            copyError\n          );\n        }}\n      />\n      {editable ? (\n        <>\n          <Button\n            type=\"default\"\n            shape=\"circle\"\n            icon={<SaveOutlined />}\n            loading={saveButtonLoading}\n            onClick={(e) => {\n              setsaveButtonLoading(true);\n              updateClip({\n                variables: { id: id, data: encryptText(dataToDisplay) },\n              });\n              refetch();\n            }}\n          />\n          <Button\n            type=\"default\"\n            shape=\"circle\"\n            icon={<CloseOutlined />}\n            onClick={(e) => {\n              setDataToDisplay(decryptText(encryptedData));\n              setEditable(!editable);\n            }}\n          />\n        </>\n      ) : (\n        <Button\n          type=\"default\"\n          shape=\"circle\"\n          icon={<EditOutlined />}\n          onClick={(e) => {\n            setEditable(!editable);\n          }}\n        />\n      )}\n\n      <Popconfirm\n        title=\"Are you sure to delete this Clip?\"\n        onConfirm={(e) => {\n          setdeleteButtonLoading(true);\n          deleteClip({ variables: { id: id } });\n          refetch();\n        }}\n        onCancel={(e) => {\n          message.warning(\"Deletion aborted!\");\n        }}\n        okText=\"Yes\"\n        cancelText=\"No\"\n      >\n        <Button\n          type=\"danger\"\n          shape=\"circle\"\n          loading={deleteButtonLoading}\n          icon={<DeleteOutlined />}\n        />\n      </Popconfirm>\n    </Card>\n  );\n}\n","/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/ProfileModal.js",["108","109"],"/home/rv/lab/project-Enclipy/frontend/enclipy-react-app/src/components/SettingsModal.js",["110","111"],{"ruleId":"112","severity":1,"message":"113","line":1,"column":17,"nodeType":"114","messageId":"115","endLine":1,"endColumn":25},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"112","severity":1,"message":"120","line":2,"column":7,"nodeType":"114","messageId":"115","endLine":2,"endColumn":11},{"ruleId":"112","severity":1,"message":"121","line":17,"column":9,"nodeType":"114","messageId":"115","endLine":17,"endColumn":12},{"ruleId":"112","severity":1,"message":"120","line":32,"column":7,"nodeType":"114","messageId":"115","endLine":32,"endColumn":11},{"ruleId":"112","severity":1,"message":"122","line":3,"column":27,"nodeType":"114","messageId":"115","endLine":3,"endColumn":36},{"ruleId":"112","severity":1,"message":"123","line":74,"column":9,"nodeType":"114","messageId":"115","endLine":74,"endColumn":16},{"ruleId":"112","severity":1,"message":"113","line":1,"column":17,"nodeType":"114","messageId":"115","endLine":1,"endColumn":25},{"ruleId":"112","severity":1,"message":"122","line":1,"column":27,"nodeType":"114","messageId":"115","endLine":1,"endColumn":36},{"ruleId":"112","severity":1,"message":"124","line":2,"column":16,"nodeType":"114","messageId":"115","endLine":2,"endColumn":22},{"ruleId":"112","severity":1,"message":"125","line":4,"column":3,"nodeType":"114","messageId":"115","endLine":4,"endColumn":15},{"ruleId":"112","severity":1,"message":"126","line":5,"column":3,"nodeType":"114","messageId":"115","endLine":5,"endColumn":20},{"ruleId":"112","severity":1,"message":"127","line":7,"column":3,"nodeType":"114","messageId":"115","endLine":7,"endColumn":18},{"ruleId":"112","severity":1,"message":"128","line":15,"column":8,"nodeType":"114","messageId":"115","endLine":15,"endColumn":20},{"ruleId":"112","severity":1,"message":"129","line":16,"column":9,"nodeType":"114","messageId":"115","endLine":16,"endColumn":16},{"ruleId":"112","severity":1,"message":"130","line":30,"column":13,"nodeType":"114","messageId":"115","endLine":30,"endColumn":20},{"ruleId":"112","severity":1,"message":"131","line":2,"column":10,"nodeType":"114","messageId":"115","endLine":2,"endColumn":15},{"ruleId":"112","severity":1,"message":"113","line":1,"column":17,"nodeType":"114","messageId":"115","endLine":1,"endColumn":25},{"ruleId":"112","severity":1,"message":"132","line":3,"column":10,"nodeType":"114","messageId":"115","endLine":3,"endColumn":18},{"ruleId":"112","severity":1,"message":"133","line":7,"column":10,"nodeType":"114","messageId":"115","endLine":7,"endColumn":22},{"ruleId":"112","severity":1,"message":"134","line":10,"column":10,"nodeType":"114","messageId":"115","endLine":10,"endColumn":22},{"ruleId":"112","severity":1,"message":"135","line":10,"column":24,"nodeType":"114","messageId":"115","endLine":10,"endColumn":38},{"ruleId":"112","severity":1,"message":"136","line":10,"column":40,"nodeType":"114","messageId":"115","endLine":10,"endColumn":53},{"ruleId":"112","severity":1,"message":"137","line":12,"column":11,"nodeType":"114","messageId":"115","endLine":12,"endColumn":17},{"ruleId":"112","severity":1,"message":"138","line":12,"column":28,"nodeType":"114","messageId":"115","endLine":12,"endColumn":34},{"ruleId":"112","severity":1,"message":"113","line":1,"column":17,"nodeType":"114","messageId":"115","endLine":1,"endColumn":25},{"ruleId":"112","severity":1,"message":"139","line":35,"column":10,"nodeType":"114","messageId":"115","endLine":35,"endColumn":23},{"ruleId":"140","severity":1,"message":"141","line":44,"column":9,"nodeType":"142","messageId":"143","endLine":44,"endColumn":11},{"ruleId":"112","severity":1,"message":"144","line":108,"column":9,"nodeType":"114","messageId":"115","endLine":108,"endColumn":24},{"ruleId":"112","severity":1,"message":"145","line":112,"column":9,"nodeType":"114","messageId":"115","endLine":112,"endColumn":23},{"ruleId":"112","severity":1,"message":"146","line":119,"column":9,"nodeType":"114","messageId":"115","endLine":119,"endColumn":25},{"ruleId":"112","severity":1,"message":"147","line":153,"column":15,"nodeType":"114","messageId":"115","endLine":153,"endColumn":21},{"ruleId":"112","severity":1,"message":"122","line":3,"column":27,"nodeType":"114","messageId":"115","endLine":3,"endColumn":36},{"ruleId":"112","severity":1,"message":"123","line":74,"column":9,"nodeType":"114","messageId":"115","endLine":74,"endColumn":16},{"ruleId":"112","severity":1,"message":"122","line":3,"column":27,"nodeType":"114","messageId":"115","endLine":3,"endColumn":36},{"ruleId":"112","severity":1,"message":"123","line":62,"column":9,"nodeType":"114","messageId":"115","endLine":62,"endColumn":16},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-native-reassign",["148"],"no-negated-in-lhs",["149"],"'done' is defined but never used.","'msg' is assigned a value but never used.","'useEffect' is defined but never used.","'oldList' is assigned a value but never used.","'Switch' is defined but never used.","'UserOutlined' is defined but never used.","'PlusCircleTwoTone' is defined but never used.","'SettingOutlined' is defined but never used.","'ToggleButton' is defined but never used.","'SubMenu' is assigned a value but never used.","'current' is assigned a value but never used.","'Radio' is defined but never used.","'useQuery' is defined but never used.","'GET_MY_CLIPS' is defined but never used.","'ApolloClient' is defined but never used.","'createHttpLink' is defined but never used.","'InMemoryCache' is defined but never used.","'Header' is assigned a value but never used.","'Footer' is assigned a value but never used.","'viewDecrypted' is assigned a value but never used.","no-dupe-keys","Duplicate key 'id'.","ObjectExpression","unexpected","'handleMouseOver' is assigned a value but never used.","'handleMouseOut' is assigned a value but never used.","'handleClipUpdate' is assigned a value but never used.","'result' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]